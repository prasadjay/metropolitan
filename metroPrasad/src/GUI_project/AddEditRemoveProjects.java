/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI_project;
import GUI_Product.SearchProduct;
import Global_Sources.Dbconnect;
import java.awt.*;
import static java.lang.Thread.sleep;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import javax.swing.JOptionPane;
import java.util.*;
import javax.swing.table.DefaultTableModel;
import java.util.StringTokenizer;

/**
 *
 * @author PRASAD
 */
public class AddEditRemoveProjects extends javax.swing.JFrame {
Dbconnect db1 = new Dbconnect();
    Connection con1 = db1.connect();
    
    public String startDate = "";
    
    String selectedItem = "";
    
    public String itemNumber[] = new String[10];
    /**
     * Creates new form Sub_Interface
     */
    public AddEditRemoveProjects() {
        initComponents();
    
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
        loadSuppliers();
        
//        if(Data.Login.getPre_UI_type()==1 || Data.Login.getPre_UI_type()==2 )
//        {
//          animation_Start a = new animation_Start(getWidth(), getHeight());
//          setVisible(true);
//          a.start();
//        }
        
        loadEditProjectList();
        
        this.txtProID.setText(getProjectID());
        
        
        Date today = new Date();
        String todayTemp = Integer.toString(today.getYear()+1900)+"/"+Integer.toString(today.getMonth()+1)+"/"+Integer.toString(today.getDate());
        this.txtToday.setText(todayTemp);
        
        //loading table to delete projects
        
              String query1 = "select pID as 'ID', pName as 'Name', pSdate as 'Start Date', pEndDate as 'End Date',  pGsupplier as 'Global Supplier', pStatus as 'Project Status'  from project where pAvailability = 'YES' ";



        ResultSet result= db1.executeSQLQuery(query1);

        try {

            int columCount = 0;
            ResultSetMetaData rsmd = result.getMetaData();
            Vector myVector = new Vector();
            columCount = rsmd.getColumnCount();
            for (int i = 1; i <= columCount; i++) {
                myVector.add(rsmd.getColumnLabel(i));
            }
            DefaultTableModel amodel = new DefaultTableModel(myVector, 0)/*0=row count*/ {
                @Override
                public boolean isCellEditable(int row, int column) {
                    //all cells false
                    return false;
                }
            };

            while (result.next()) {
                String[] rowData = new String[columCount];
                for (int i = 1; i <= columCount; i++) {
                    if (i == 1) {
                        String id = result.getString(i);
                        rowData[i - 1] = id.toUpperCase();
                    } else {
                        rowData[i - 1] = result.getString(i);
                    }
                }
                amodel.addRow(rowData);
            }

            tableSummaryProjects.setModel(amodel);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error in Showing Data", "METROPOLITAN ENGINEERING (PVT) LTD", 1);
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnAddProject = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        txtProID = new javax.swing.JTextField();
        txtProName = new javax.swing.JTextField();
        txtToday = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel5 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txtItem1 = new javax.swing.JTextField();
        txtItem2 = new javax.swing.JTextField();
        txtItem3 = new javax.swing.JTextField();
        txtItem4 = new javax.swing.JTextField();
        txtItem5 = new javax.swing.JTextField();
        txtItem6 = new javax.swing.JTextField();
        txtItem7 = new javax.swing.JTextField();
        txtItem8 = new javax.swing.JTextField();
        txtItem9 = new javax.swing.JTextField();
        txtItem10 = new javax.swing.JTextField();
        txtQ1 = new javax.swing.JTextField();
        txtQ2 = new javax.swing.JTextField();
        txtQ3 = new javax.swing.JTextField();
        txtQ4 = new javax.swing.JTextField();
        txtQ5 = new javax.swing.JTextField();
        txtQ6 = new javax.swing.JTextField();
        txtQ7 = new javax.swing.JTextField();
        txtQ8 = new javax.swing.JTextField();
        txtQ9 = new javax.swing.JTextField();
        txtQ10 = new javax.swing.JTextField();
        date1 = new com.toedter.calendar.JDateChooser();
        date2 = new com.toedter.calendar.JDateChooser();
        date3 = new com.toedter.calendar.JDateChooser();
        date4 = new com.toedter.calendar.JDateChooser();
        date5 = new com.toedter.calendar.JDateChooser();
        date6 = new com.toedter.calendar.JDateChooser();
        date7 = new com.toedter.calendar.JDateChooser();
        date8 = new com.toedter.calendar.JDateChooser();
        date9 = new com.toedter.calendar.JDateChooser();
        date10 = new com.toedter.calendar.JDateChooser();
        cmbSupp1 = new javax.swing.JComboBox();
        cmbSupp2 = new javax.swing.JComboBox();
        cmbSupp3 = new javax.swing.JComboBox();
        cmbSupp4 = new javax.swing.JComboBox();
        cmbSupp5 = new javax.swing.JComboBox();
        cmbSupp6 = new javax.swing.JComboBox();
        cmbSupp7 = new javax.swing.JComboBox();
        cmbSupp8 = new javax.swing.JComboBox();
        cmbSupp9 = new javax.swing.JComboBox();
        cmbSupp10 = new javax.swing.JComboBox();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        dateGlobal = new com.toedter.calendar.JDateChooser();
        cmbSuppGlobal = new javax.swing.JComboBox();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        btnAddProject1 = new javax.swing.JButton();
        txtProID1 = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        txtItem11 = new javax.swing.JTextField();
        txtItem12 = new javax.swing.JTextField();
        txtItem13 = new javax.swing.JTextField();
        txtItem14 = new javax.swing.JTextField();
        txtItem15 = new javax.swing.JTextField();
        txtItem16 = new javax.swing.JTextField();
        txtItem17 = new javax.swing.JTextField();
        txtItem18 = new javax.swing.JTextField();
        txtItem19 = new javax.swing.JTextField();
        txtItem20 = new javax.swing.JTextField();
        txtQ11 = new javax.swing.JTextField();
        txtQ12 = new javax.swing.JTextField();
        txtQ13 = new javax.swing.JTextField();
        txtQ14 = new javax.swing.JTextField();
        txtQ15 = new javax.swing.JTextField();
        txtQ16 = new javax.swing.JTextField();
        txtQ17 = new javax.swing.JTextField();
        txtQ18 = new javax.swing.JTextField();
        txtQ19 = new javax.swing.JTextField();
        txtQ20 = new javax.swing.JTextField();
        date11 = new com.toedter.calendar.JDateChooser();
        date12 = new com.toedter.calendar.JDateChooser();
        date13 = new com.toedter.calendar.JDateChooser();
        date14 = new com.toedter.calendar.JDateChooser();
        date15 = new com.toedter.calendar.JDateChooser();
        date16 = new com.toedter.calendar.JDateChooser();
        date17 = new com.toedter.calendar.JDateChooser();
        date18 = new com.toedter.calendar.JDateChooser();
        date19 = new com.toedter.calendar.JDateChooser();
        date20 = new com.toedter.calendar.JDateChooser();
        cmbSupp11 = new javax.swing.JComboBox();
        cmbSupp12 = new javax.swing.JComboBox();
        cmbSupp13 = new javax.swing.JComboBox();
        cmbSupp14 = new javax.swing.JComboBox();
        cmbSupp15 = new javax.swing.JComboBox();
        cmbSupp16 = new javax.swing.JComboBox();
        cmbSupp17 = new javax.swing.JComboBox();
        cmbSupp18 = new javax.swing.JComboBox();
        cmbSupp19 = new javax.swing.JComboBox();
        cmbSupp20 = new javax.swing.JComboBox();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        dateGlobal1 = new com.toedter.calendar.JDateChooser();
        cmbSuppGlobal1 = new javax.swing.JComboBox();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        cmbProName = new javax.swing.JComboBox();
        btnSave = new javax.swing.JButton();
        jLabel54 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        jLabel51 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSummaryProjects = new javax.swing.JTable();
        btnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Serial NO");

        jLabel6.setText("Commissioned date  ");

        jLabel7.setText("Delivered  time ");

        jLabel8.setText("Genset Model");

        jLabel9.setText("Genset S/N");

        jLabel14.setText("Controller Type");

        jLabel15.setText("Environment");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Edit Remove Projects");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTabbedPane1.setBackground(new java.awt.Color(248, 248, 248));

        jPanel8.setBackground(new java.awt.Color(252, 252, 252));
        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Project No");

        jLabel3.setText("Project Name");

        jLabel4.setText("Today is ");

        btnAddProject.setText("Add Project");
        btnAddProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProjectActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        txtProID.setEditable(false);
        txtProID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtProName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtToday.setEditable(false);
        txtToday.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel5.setText("Item 1");

        jLabel10.setText("Item 2");

        jLabel11.setText("Item 3");

        jLabel12.setText("Item 4");

        jLabel13.setText("Item 5");

        jLabel16.setText("Item 6");

        jLabel17.setText("Item 7");

        jLabel18.setText("Item 8");

        jLabel19.setText("Item 9");

        jLabel20.setText("Item 10");

        txtItem1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtQ1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtQ1.setText("1");

        txtQ2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtQ2.setText("1");

        txtQ3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtQ3.setText("1");

        txtQ4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtQ4.setText("1");

        txtQ5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtQ5.setText("1");

        txtQ6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtQ6.setText("1");

        txtQ7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtQ7.setText("1");

        txtQ8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtQ8.setText("1");

        txtQ9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtQ9.setText("1");

        txtQ10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtQ10.setText("1");

        cmbSupp1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp3.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp4.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp5.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp6.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp7.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp8.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp9.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp10.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel21.setText("Item No");

        jLabel22.setText("Item Name");

        jLabel23.setText("Qty");

        jLabel24.setText("Finish Date");

        jLabel25.setText("Supplier");

        jLabel26.setText("Global Date");

        jLabel27.setText("Global Supplier");

        cmbSuppGlobal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel28.setText("Note that specifying global date and suppliers ");

        jLabel29.setText("will override selected dates and suppliers...");

        jLabel53.setText("End Date");

        jButton1.setText("DEMO");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(21, 21, 21)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtProName, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(txtProID, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(74, 74, 74)
                        .addComponent(btnAddProject, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addGap(35, 35, 35)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtToday, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel53)
                        .addGap(18, 18, 18)
                        .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12)
                            .addComponent(jLabel13)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtItem1)
                            .addComponent(txtItem2)
                            .addComponent(txtItem3)
                            .addComponent(txtItem4)
                            .addComponent(txtItem5)
                            .addComponent(txtItem6)
                            .addComponent(txtItem7)
                            .addComponent(txtItem8)
                            .addComponent(txtItem9)
                            .addComponent(txtItem10, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE))
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                        .addComponent(txtQ2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(date2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                        .addComponent(txtQ1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(date1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(3, 3, 3))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(txtQ3, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(date3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(txtQ4, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(date4, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(txtQ10)
                                        .addGap(18, 18, 18)
                                        .addComponent(date10, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(txtQ9)
                                        .addGap(18, 18, 18)
                                        .addComponent(date9, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(txtQ8)
                                        .addGap(18, 18, 18)
                                        .addComponent(date8, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(txtQ7)
                                        .addGap(18, 18, 18)
                                        .addComponent(date7, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(txtQ6)
                                        .addGap(18, 18, 18)
                                        .addComponent(date6, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addComponent(txtQ5)
                                        .addGap(18, 18, 18)
                                        .addComponent(date5, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbSupp1, 0, 250, Short.MAX_VALUE)
                            .addComponent(cmbSupp2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSupp3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSupp4, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSupp5, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSupp6, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSupp7, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSupp8, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSupp9, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSupp10, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(23, 23, 23))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel21)
                        .addGap(160, 160, 160)
                        .addComponent(jLabel22)
                        .addGap(186, 186, 186)
                        .addComponent(jLabel23)
                        .addGap(42, 42, 42)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel25)
                        .addGap(131, 131, 131))))
            .addComponent(jSeparator2)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel26)
                .addGap(18, 18, 18)
                .addComponent(dateGlobal, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jLabel27)
                .addGap(18, 18, 18)
                .addComponent(cmbSuppGlobal, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel28)
                    .addComponent(jLabel29))
                .addGap(0, 42, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtProID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddProject)
                    .addComponent(btnClear)
                    .addComponent(jLabel4)
                    .addComponent(txtToday, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(19, 19, 19)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtProName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel53)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel8Layout.createSequentialGroup()
                                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                                        .addGap(23, 23, 23)
                                                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(jLabel21)
                                                            .addComponent(jLabel22)
                                                            .addComponent(jLabel23)
                                                            .addComponent(jLabel24)
                                                            .addComponent(jLabel25))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                                                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                .addComponent(jLabel5)
                                                                .addComponent(txtItem1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(txtQ1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                            .addComponent(cmbSupp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(date1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(jPanel8Layout.createSequentialGroup()
                                                                .addGap(23, 23, 23)
                                                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                                    .addComponent(jLabel10)
                                                                    .addComponent(txtItem2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(txtQ2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(cmbSupp2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(date2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(24, 24, 24)
                                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel11)
                                                        .addComponent(txtItem3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtQ3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(date3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(cmbSupp3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(29, 29, 29)
                                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel12)
                                                        .addComponent(txtItem4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtQ4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(date4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(jPanel8Layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(cmbSupp4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(31, 31, 31)
                                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel8Layout.createSequentialGroup()
                                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(jLabel13)
                                                        .addComponent(txtItem5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(txtQ5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(date5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(cmbSupp5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                                        .addGap(34, 34, 34)
                                                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                            .addComponent(jLabel16)
                                                            .addComponent(txtItem6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(txtQ6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(cmbSupp6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                            .addComponent(date6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(33, 33, 33)
                                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel17)
                                                .addComponent(txtItem7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtQ7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(date7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cmbSupp7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel18)
                                            .addComponent(txtItem8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtQ8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbSupp8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(date8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel19)
                                        .addComponent(txtItem9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtQ9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(date9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbSupp9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel8Layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(txtItem10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtQ10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbSupp10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(date10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel27)
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel26)
                                .addComponent(cmbSuppGlobal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(dateGlobal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel29)
                        .addGap(9, 9, 9))))
        );

        jTabbedPane1.addTab("Add Project", jPanel8);

        jPanel10.setBackground(new java.awt.Color(252, 252, 252));
        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel30.setText("Project No");

        jLabel31.setText("Project Name");

        btnAddProject1.setText("Select Project");
        btnAddProject1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProject1ActionPerformed(evt);
            }
        });

        txtProID1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel32.setText("Item 1");

        jLabel33.setText("Item 2");

        jLabel34.setText("Item 3");

        jLabel35.setText("Item 4");

        jLabel36.setText("Item 5");

        jLabel37.setText("Item 6");

        jLabel38.setText("Item 7");

        jLabel39.setText("Item 8");

        jLabel40.setText("Item 9");

        jLabel41.setText("Item 10");

        txtItem11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtItem20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtQ11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtQ12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtQ13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtQ14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtQ15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtQ16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtQ17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtQ18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        txtQ19.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtQ19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQ19ActionPerformed(evt);
            }
        });

        txtQ20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        cmbSupp11.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp12.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp13.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp14.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp15.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp16.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp17.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp18.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp19.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSupp20.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel42.setText("Item No");

        jLabel43.setText("Item Name");

        jLabel44.setText("Qty");

        jLabel45.setText("Finish Date");

        jLabel46.setText("Supplier");

        jLabel47.setText("Global Date");

        jLabel48.setText("Global Supplier");

        cmbSuppGlobal1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel49.setText("Note that specifying global date and suppliers ");

        jLabel50.setText("will override selected dates and suppliers...");

        cmbProName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbProName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProNameActionPerformed(evt);
            }
        });

        btnSave.setText("Save Changes");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel54.setText("End Date");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel30)
                        .addGap(34, 34, 34)
                        .addComponent(txtProID1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(jLabel31)
                        .addGap(18, 18, 18)
                        .addComponent(cmbProName, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addComponent(btnAddProject1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 933, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel42)
                        .addGap(160, 160, 160)
                        .addComponent(jLabel43)
                        .addGap(151, 151, 151)
                        .addComponent(jLabel44)
                        .addGap(77, 77, 77)
                        .addComponent(jLabel45)
                        .addGap(196, 196, 196)
                        .addComponent(jLabel46))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel32)
                        .addGap(38, 38, 38)
                        .addComponent(txtItem11, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtQ11, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(date11, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSupp11, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel33)
                        .addGap(38, 38, 38)
                        .addComponent(txtItem12, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtQ12, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(date12, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSupp12, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel34)
                        .addGap(38, 38, 38)
                        .addComponent(txtItem13, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtQ13, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(date13, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSupp13, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel35)
                        .addGap(38, 38, 38)
                        .addComponent(txtItem14, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtQ14, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(date14, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSupp14, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel36)
                        .addGap(38, 38, 38)
                        .addComponent(txtItem15, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtQ15, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(date15, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSupp15, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel37)
                        .addGap(38, 38, 38)
                        .addComponent(txtItem16, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtQ16, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(date16, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSupp16, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel38)
                        .addGap(38, 38, 38)
                        .addComponent(txtItem17, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtQ17, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(date17, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSupp17, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel39)
                        .addGap(38, 38, 38)
                        .addComponent(txtItem18, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtQ18, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(date18, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSupp18, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel40)
                        .addGap(38, 38, 38)
                        .addComponent(txtItem19, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtQ19, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(date19, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSupp19, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel41)
                        .addGap(32, 32, 32)
                        .addComponent(txtItem20, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(txtQ20, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(date20, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cmbSupp20, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 933, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel47))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel54)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dateGlobal1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                        .addGap(34, 34, 34)
                        .addComponent(jLabel48)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(cmbSuppGlobal1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel49)
                                    .addComponent(jLabel50)))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(4, 4, 4))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtProID1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbProName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddProject1))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addComponent(jLabel31))))
                .addGap(10, 10, 10)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel42)
                    .addComponent(jLabel43)
                    .addComponent(jLabel44)
                    .addComponent(jLabel45)
                    .addComponent(jLabel46))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel32))
                    .addComponent(txtItem11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQ11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupp11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel33))
                    .addComponent(txtItem12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQ12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupp12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel34))
                    .addComponent(txtItem13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQ13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupp13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel35))
                    .addComponent(txtItem14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQ14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupp14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel36))
                    .addComponent(txtItem15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQ15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupp15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel37))
                    .addComponent(txtItem16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQ16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupp16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel38))
                    .addComponent(txtItem17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQ17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupp17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel39))
                    .addComponent(txtItem18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQ18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupp18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel40))
                    .addComponent(txtItem19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQ19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupp19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel41))
                    .addComponent(txtItem20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQ20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(date20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSupp20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel47))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(dateGlobal1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel48))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(cmbSuppGlobal1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel49)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel50)))
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel54))
                        .addContainerGap(17, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave)
                        .addContainerGap())))
        );

        jTabbedPane1.addTab("Edit Project", jPanel10);

        jPanel1.setBackground(new java.awt.Color(252, 252, 252));

        jLabel51.setText("Summary of Projects");

        tableSummaryProjects.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tableSummaryProjects.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableSummaryProjects.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableSummaryProjectsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableSummaryProjects);

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(395, 395, 395)
                .addComponent(jLabel51)
                .addContainerGap(447, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(394, 394, 394))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel51)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(btnDelete)
                .addGap(31, 31, 31))
        );

        jTabbedPane1.addTab("Remove Project", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

       class animation_Start extends Thread {

        int max_w;
        int max_h;

        public animation_Start(int max_w, int max_h) {
            this.max_h = max_h;
            this.max_w = max_w;
        }
        long sleepb = 1;
        int add = 30;//no pixels add

        public void run() {
            setSize(0, 0);
            int x = 0;
            int y = 0;

            while (y < max_h || x < max_w) {
                if (y > max_h && x < max_w) {
                    x = x + add;
                    setSize(x, max_h);
                } else if (y < max_h && x > max_w) {

                    y = y + add;
                    setSize(max_w, y);
                } else if (y < max_h && x < max_w) {
                    y = y + add;
                    x = x + add;
                    setSize(x, y);
                } else//window has got the wanted size(prefered size)
                {
                    setSize(max_h, max_w);
                    pack();
                }



                try {
                    sleep(sleepb);
                } catch (InterruptedException ex) {
                    
                }

            }
            //  setSize(962, 697);
            pack();
           // System.out.println(getWidth());
            //System.out.println(getHeight());

        }
    }
    //animation for exit of window
    class animation_exit extends Thread {

        long sleepa = 1;
        int min =25;//no pixels reduce

        public void run() {
            int x = getWidth();
            int y = getHeight();

            while (x > 0 || y > 0) {
                x = x - min;
                y = y - min;
                setSize(x, y);
                try {
                    sleep(sleepa);
                } catch (InterruptedException ex) {
                    
                }

            }

        }
    }
    
    private void txtQ19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQ19ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQ19ActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        // TODO add your handling code here:

        String query1 = "select pID as 'ID', pName as 'Name', pSdate as 'Start Date', pEndDate as 'End Date',  pGsupplier as 'Global Supplier', pStatus as 'Project Status'  from project where pAvailability = 'YES' ";

        ResultSet result= db1.executeSQLQuery(query1);

        try {

            int columCount = 0;
            ResultSetMetaData rsmd = result.getMetaData();
            Vector myVector = new Vector();
            columCount = rsmd.getColumnCount();
            for (int i = 1; i <= columCount; i++) {
                myVector.add(rsmd.getColumnLabel(i));
            }
            DefaultTableModel amodel = new DefaultTableModel(myVector, 0)/*0=row count*/ {
                @Override
                public boolean isCellEditable(int row, int column) {
                    //all cells false
                    return false;
                }
            };

            while (result.next()) {
                String[] rowData = new String[columCount];
                for (int i = 1; i <= columCount; i++) {
                    if (i == 1) {
                        String id = result.getString(i);
                        rowData[i - 1] = id.toUpperCase();
                    } else {
                        rowData[i - 1] = result.getString(i);
                    }
                }
                amodel.addRow(rowData);
            }

            tableSummaryProjects.setModel(amodel);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error in Showing Data", "METROPOLITAN ENGINEERING (PVT) LTD", 1);
        }
        
        
        
        
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnAddProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProjectActionPerformed
        // TODO add your handling code here:
      /*  
        String n = "fdsa";
       
        System.out.println(n);
        
        Date date;
date = this.date1.getDate();

if(date == null)
    System.out.println(n);
else
    System.out.println(this.date1.getDate().toString());

*/
        
        Color normal=new Color(255, 255, 255);//white normal colour
        Color error=new Color(255, 255, 153);
        this.txtProName.setBackground(normal);
        
        
            String pID = this.txtProID.getText().toString();
            String pName =this.txtProName.getText().toString(); 
            String pSdate = this.txtToday.getText().toString();
            
            String pGsupplier = this.cmbSuppGlobal.getSelectedItem().toString();
            String pStatus = "pending";
            String pAvailability = "YES";
            
           
            
            //String endDate = getDateInString(this.jDateChooser1.getDate());
        
        if(this.txtProName.getText().equals(""))
        {
            
            this.txtProName.setBackground(error);
            JOptionPane.showMessageDialog(null, "Insert Project Name","METROPOLITAN ENGINEERING (PVT) LTD", 1);
            
        }
        else
        {
            if(this.txtItem1.getText().equals("") && this.txtItem2.getText().equals("") && this.txtItem3.getText().equals("") && this.txtItem4.getText().equals("") && this.txtItem5.getText().equals("") && this.txtItem6.getText().equals("") && this.txtItem7.getText().equals("") && this.txtItem8.getText().equals("") && this.txtItem9.getText().equals("") && this.txtItem10.getText().equals("") )
            {
                JOptionPane.showMessageDialog(null, "This project has no components! Insert atleast one component to continue!","METROPOLITAN ENGINEERING (PVT) LTD", 1);
            }
            else
            {
                
                if(this.jDateChooser1.getDate()==null)
                {
                    JOptionPane.showMessageDialog(null, "Please insert an Ending Date", "METROPOLITAN ENGINEERING (PVT) LTD", 1);
                    
                }
                else
                {
                
                String endDate = getDateInString(this.jDateChooser1.getDate());

                Date dates[] = new Date[10];
                
                try
                {
                    dates[0] = this.date1.getDate();
                    dates[1] = this.date2.getDate();
                    dates[2] = this.date3.getDate();
                    dates[3] = this.date4.getDate();
                    dates[4] = this.date5.getDate();
                    dates[5] = this.date6.getDate();
                    dates[6] = this.date7.getDate();
                    dates[7] = this.date8.getDate();
                    dates[8] = this.date9.getDate();
                    dates[9] = this.date10.getDate();
                }
                catch(Exception e)
                {
                    System.out.println(e.getMessage());
                }
                
                String datee[] = new String[10];
                datee[0] = "00/00/00";
                datee[1] = "00/00/00";
                datee[2] = "00/00/00";
                datee[3] = "00/00/00";
                datee[4] = "00/00/00";
                datee[5] = "00/00/00";
                datee[6] = "00/00/00";
                datee[7] = "00/00/00";
                datee[8] = "00/00/00";
                datee[9] = "00/00/00";

                
                
                
                String qty[] = new String[10];
                qty[0] = this.txtQ1.getText().toString();
                qty[1] = this.txtQ2.getText().toString();
                qty[2] = this.txtQ3.getText().toString();
                qty[3] = this.txtQ4.getText().toString();
                qty[4] = this.txtQ5.getText().toString();
                qty[5] = this.txtQ6.getText().toString();
                qty[6] = this.txtQ7.getText().toString();
                qty[7] = this.txtQ8.getText().toString();
                qty[8] = this.txtQ9.getText().toString();
                qty[9] = this.txtQ10.getText().toString();
                
                String item[] = new String[10];
                item[0] = this.txtItem1.getText();
                item[1] = this.txtItem2.getText();
                item[2] = this.txtItem3.getText();
                item[3] = this.txtItem4.getText();
                item[4] = this.txtItem5.getText();
                item[5] = this.txtItem6.getText();
                item[6] = this.txtItem7.getText();
                item[7] = this.txtItem8.getText();
                item[8] = this.txtItem9.getText();
                item[9] = this.txtItem10.getText();
                
                
                String supplier[] = new String[10];
                supplier[0] = this.cmbSupp1.getSelectedItem().toString();
                supplier[1] = this.cmbSupp2.getSelectedItem().toString();
                supplier[2] = this.cmbSupp3.getSelectedItem().toString();
                supplier[3] = this.cmbSupp4.getSelectedItem().toString();
                supplier[4] = this.cmbSupp5.getSelectedItem().toString();
                supplier[5] = this.cmbSupp6.getSelectedItem().toString();
                supplier[6] = this.cmbSupp7.getSelectedItem().toString();
                supplier[7] = this.cmbSupp8.getSelectedItem().toString();
                supplier[8] = this.cmbSupp9.getSelectedItem().toString();
                supplier[9] = this.cmbSupp10.getSelectedItem().toString();
                
                Date globalDate = this.dateGlobal.getDate();
                String dateGlobal = "1900/00/00";
                
                String supplierGlobal = this.cmbSuppGlobal.getSelectedItem().toString();
                
                //calculate entered items
                
                int enteredItems = 0;
                
                for(int x=0; x<10; x++)
                {
                    if(!item[x].equals(""))
                        enteredItems +=1;
                }
                
                System.out.println(enteredItems);
                
                
                //generating queryies
                
                //item 1......................................................
                
               if(enteredItems==1)
               {
                   
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                   }
                   else
                   {
                       
                       dateGlobal = getDateInString(globalDate);
                       datee[0] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal.getSelectedItem().toString();
                   }
                   
                   if(this.date1.getDate()==null && this.dateGlobal.getDate()==null)
                   {
                       JOptionPane.showMessageDialog(null, "Insert Required Dates OR Set a Global Date!","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
                   
                   else{
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   
                   int x1=0, x2=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0)
                      JOptionPane.showMessageDialog(null, "Records inserted sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
               }
               
               //item 2............................................................................................
               
               if(enteredItems==2)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal.getSelectedItem().toString();
                   }
                   
                   if(this.date1.getDate()==null && this.date2.getDate()==null && this.dateGlobal.getDate()==null)
                   {
                       JOptionPane.showMessageDialog(null, "Insert Required Dates OR Set a Global Date!","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
                   else
                   {
                   
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   
                   int x1=0, x2=0, x3=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0)
                      JOptionPane.showMessageDialog(null, "Records inserted sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
               }
               
               //item 3 ...................................................
               
               
               if(enteredItems==3)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal.getSelectedItem().toString();
                   }
                   
                   
                   if(this.date1.getDate()==null && this.date2.getDate()==null && this.date3.getDate()==null && this.dateGlobal.getDate()==null)
                   {
                       JOptionPane.showMessageDialog(null, "Insert Required Dates OR Set a Global Date!","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
                   else
                   {
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0 && x4>0)
                      JOptionPane.showMessageDialog(null, "Records inserted sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
               }
               
               //item 4.......................................................
               
               if(enteredItems==4)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                        datee[3] = getDateInString(dates[3]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                       datee[3] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal.getSelectedItem().toString();
                   }
                   
                   if(this.date1.getDate()==null && this.date2.getDate()==null && this.date3.getDate()==null && this.date4.getDate()==null && this.dateGlobal.getDate()==null)
                   {
                       JOptionPane.showMessageDialog(null, "Insert Required Dates OR Set a Global Date!","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
                   else
                   {
                   
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   PreparedStatement stmt5 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0, x5=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt5 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt5.setString(1, getItemId());
                   stmt5.setString(2, item[3]);
                   stmt5.setString(3, datee[3]);
                   stmt5.setString(4, supplier[3]);
                   stmt5.setString(5, qty[3]);
                   stmt5.setString(6, qty[3]);
                   stmt5.setString(7, pStatus);
                   stmt5.setString(8, pID);
                   x5 = stmt5.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0 && x4>0 && x5>0)
                      JOptionPane.showMessageDialog(null, "Records inserted sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
               }
               
               //item 5 ................................................................
               
               if(enteredItems==5)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                        datee[3] = getDateInString(dates[3]);
                        datee[4] = getDateInString(dates[4]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                       datee[3] = getDateInString(globalDate);
                       datee[4] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal.getSelectedItem().toString();
                   }
                   
                   
                   if(this.date1.getDate()==null && this.date2.getDate()==null && this.date3.getDate()==null && this.date4.getDate()==null && this.date5.getDate()==null && this.dateGlobal.getDate()==null)
                   {
                       JOptionPane.showMessageDialog(null, "Insert Required Dates OR Set a Global Date!","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
                   else
                   {
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   PreparedStatement stmt5 = null;
                   PreparedStatement stmt6 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0, x5=0, x6=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt5 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt5.setString(1, getItemId());
                   stmt5.setString(2, item[3]);
                   stmt5.setString(3, datee[3]);
                   stmt5.setString(4, supplier[3]);
                   stmt5.setString(5, qty[3]);
                   stmt5.setString(6, qty[3]);
                   stmt5.setString(7, pStatus);
                   stmt5.setString(8, pID);
                   x5 = stmt5.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt6 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt6.setString(1, getItemId());
                   stmt6.setString(2, item[4]);
                   stmt6.setString(3, datee[4]);
                   stmt6.setString(4, supplier[4]);
                   stmt6.setString(5, qty[4]);
                   stmt6.setString(6, qty[4]);
                   stmt6.setString(7, pStatus);
                   stmt6.setString(8, pID);
                   x6 = stmt6.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0 && x4>0 && x5>0 && x6>0)
                      JOptionPane.showMessageDialog(null, "Records inserted sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
               }
               
               //item 6..............................................................
               
               
               if(enteredItems==6)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                        datee[3] = getDateInString(dates[3]);
                        datee[4] = getDateInString(dates[4]);
                        datee[5] = getDateInString(dates[5]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                       datee[3] = getDateInString(globalDate);
                       datee[4] = getDateInString(globalDate);
                       datee[5] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal.getSelectedItem().toString();
                   }
                   
                   
                   if(this.date1.getDate()==null && this.date2.getDate()==null && this.date3.getDate()==null && this.date4.getDate()==null && this.date5.getDate()==null && this.date6.getDate()==null && this.dateGlobal.getDate()==null)
                   {
                       JOptionPane.showMessageDialog(null, "Insert Required Dates OR Set a Global Date!","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
                   else
                   {
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   PreparedStatement stmt5 = null;
                   PreparedStatement stmt6 = null;
                   PreparedStatement stmt7 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0, x5=0, x6=0, x7=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt5 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt5.setString(1, getItemId());
                   stmt5.setString(2, item[3]);
                   stmt5.setString(3, datee[3]);
                   stmt5.setString(4, supplier[3]);
                   stmt5.setString(5, qty[3]);
                   stmt5.setString(6, qty[3]);
                   stmt5.setString(7, pStatus);
                   stmt5.setString(8, pID);
                   x5 = stmt5.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt6 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt6.setString(1, getItemId());
                   stmt6.setString(2, item[4]);
                   stmt6.setString(3, datee[4]);
                   stmt6.setString(4, supplier[4]);
                   stmt6.setString(5, qty[4]);
                   stmt6.setString(6, qty[4]);
                   stmt6.setString(7, pStatus);
                   stmt6.setString(8, pID);
                   x6 = stmt6.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt7 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt7.setString(1, getItemId());
                   stmt7.setString(2, item[5]);
                   stmt7.setString(3, datee[5]);
                   stmt7.setString(4, supplier[5]);
                   stmt7.setString(5, qty[5]);
                   stmt7.setString(6, qty[5]);
                   stmt7.setString(7, pStatus);
                   stmt7.setString(8, pID);
                   x7 = stmt7.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0 && x4>0 && x5>0 && x6>0 && x7>0)
                      JOptionPane.showMessageDialog(null, "Records inserted sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
               }
               
               //Item 7 ........................................
               
               if(enteredItems==7)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                        datee[3] = getDateInString(dates[3]);
                        datee[4] = getDateInString(dates[4]);
                        datee[5] = getDateInString(dates[5]);
                        datee[6] = getDateInString(dates[6]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                       datee[3] = getDateInString(globalDate);
                       datee[4] = getDateInString(globalDate);
                       datee[5] = getDateInString(globalDate);
                       datee[6] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal.getSelectedItem().toString();
                   }
                   
                   if(this.date1.getDate()==null && this.date2.getDate()==null && this.date3.getDate()==null && this.date4.getDate()==null && this.date5.getDate()==null && this.date6.getDate()==null && this.date7.getDate()==null && this.dateGlobal.getDate()==null)
                   {
                       JOptionPane.showMessageDialog(null, "Insert Required Dates OR Set a Global Date!","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
                   else
                   {
                   
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   PreparedStatement stmt5 = null;
                   PreparedStatement stmt6 = null;
                   PreparedStatement stmt7 = null;
                   PreparedStatement stmt8 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0, x5=0, x6=0, x7=0, x8=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt5 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt5.setString(1, getItemId());
                   stmt5.setString(2, item[3]);
                   stmt5.setString(3, datee[3]);
                   stmt5.setString(4, supplier[3]);
                   stmt5.setString(5, qty[3]);
                   stmt5.setString(6, qty[3]);
                   stmt5.setString(7, pStatus);
                   stmt5.setString(8, pID);
                   x5 = stmt5.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt6 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt6.setString(1, getItemId());
                   stmt6.setString(2, item[4]);
                   stmt6.setString(3, datee[4]);
                   stmt6.setString(4, supplier[4]);
                   stmt6.setString(5, qty[4]);
                   stmt6.setString(6, qty[4]);
                   stmt6.setString(7, pStatus);
                   stmt6.setString(8, pID);
                   x6 = stmt6.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt7 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt7.setString(1, getItemId());
                   stmt7.setString(2, item[5]);
                   stmt7.setString(3, datee[5]);
                   stmt7.setString(4, supplier[5]);
                   stmt7.setString(5, qty[5]);
                   stmt7.setString(6, qty[5]);
                   stmt7.setString(7, pStatus);
                   stmt7.setString(8, pID);
                   x7 = stmt7.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt8 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt8.setString(1, getItemId());
                   stmt8.setString(2, item[6]);
                   stmt8.setString(3, datee[6]);
                   stmt8.setString(4, supplier[6]);
                   stmt8.setString(5, qty[6]);
                   stmt8.setString(6, qty[6]);
                   stmt8.setString(7, pStatus);
                   stmt8.setString(8, pID);
                   x8 = stmt8.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0 && x4>0 && x5>0 && x6>0 && x7>0 && x8>0)
                      JOptionPane.showMessageDialog(null, "Records inserted sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
               }
               
               //item 8 ....................................................
               
               if(enteredItems==8)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                        datee[3] = getDateInString(dates[3]);
                        datee[4] = getDateInString(dates[4]);
                        datee[5] = getDateInString(dates[5]);
                        datee[6] = getDateInString(dates[6]);
                        datee[7] = getDateInString(dates[7]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                       datee[3] = getDateInString(globalDate);
                       datee[4] = getDateInString(globalDate);
                       datee[5] = getDateInString(globalDate);
                       datee[6] = getDateInString(globalDate);
                       datee[7] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal.getSelectedItem().toString();
                   }
                   
                   
                   if(this.date1.getDate()==null && this.date2.getDate()==null && this.date3.getDate()==null && this.date4.getDate()==null && this.date5.getDate()==null && this.date6.getDate()==null && this.date7.getDate()==null && this.date8.getDate()==null && this.dateGlobal.getDate()==null)
                   {
                       JOptionPane.showMessageDialog(null, "Insert Required Dates OR Set a Global Date!","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
                   else
                   {
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   PreparedStatement stmt5 = null;
                   PreparedStatement stmt6 = null;
                   PreparedStatement stmt7 = null;
                   PreparedStatement stmt8 = null;
                   PreparedStatement stmt9 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0, x5=0, x6=0, x7=0, x8=0, x9=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt5 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt5.setString(1, getItemId());
                   stmt5.setString(2, item[3]);
                   stmt5.setString(3, datee[3]);
                   stmt5.setString(4, supplier[3]);
                   stmt5.setString(5, qty[3]);
                   stmt5.setString(6, qty[3]);
                   stmt5.setString(7, pStatus);
                   stmt5.setString(8, pID);
                   x5 = stmt5.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt6 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt6.setString(1, getItemId());
                   stmt6.setString(2, item[4]);
                   stmt6.setString(3, datee[4]);
                   stmt6.setString(4, supplier[4]);
                   stmt6.setString(5, qty[4]);
                   stmt6.setString(6, qty[4]);
                   stmt6.setString(7, pStatus);
                   stmt6.setString(8, pID);
                   x6 = stmt6.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt7 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt7.setString(1, getItemId());
                   stmt7.setString(2, item[5]);
                   stmt7.setString(3, datee[5]);
                   stmt7.setString(4, supplier[5]);
                   stmt7.setString(5, qty[5]);
                   stmt7.setString(6, qty[5]);
                   stmt7.setString(7, pStatus);
                   stmt7.setString(8, pID);
                   x7 = stmt7.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt8 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt8.setString(1, getItemId());
                   stmt8.setString(2, item[6]);
                   stmt8.setString(3, datee[6]);
                   stmt8.setString(4, supplier[6]);
                   stmt8.setString(5, qty[6]);
                   stmt8.setString(6, qty[6]);
                   stmt8.setString(7, pStatus);
                   stmt8.setString(8, pID);
                   x8 = stmt8.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt9 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt9.setString(1, getItemId());
                   stmt9.setString(2, item[7]);
                   stmt9.setString(3, datee[7]);
                   stmt9.setString(4, supplier[7]);
                   stmt9.setString(5, qty[7]);
                   stmt9.setString(6, qty[7]);
                   stmt9.setString(7, pStatus);
                   stmt9.setString(8, pID);
                   x9 = stmt9.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0 && x4>0 && x5>0 && x6>0 && x7>0 && x8>0 && x9>0)
                      JOptionPane.showMessageDialog(null, "Records inserted sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
               }
               
               //items 9 ................................................
               
               if(enteredItems==9)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                        datee[3] = getDateInString(dates[3]);
                        datee[4] = getDateInString(dates[4]);
                        datee[5] = getDateInString(dates[5]);
                        datee[6] = getDateInString(dates[6]);
                        datee[7] = getDateInString(dates[7]);
                        datee[8] = getDateInString(dates[8]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                       datee[3] = getDateInString(globalDate);
                       datee[4] = getDateInString(globalDate);
                       datee[5] = getDateInString(globalDate);
                       datee[6] = getDateInString(globalDate);
                       datee[7] = getDateInString(globalDate);
                       datee[8] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal.getSelectedItem().toString();
                   }
                   
                   
                   if(this.date1.getDate()==null && this.date2.getDate()==null && this.date3.getDate()==null && this.date4.getDate()==null && this.date5.getDate()==null && this.date6.getDate()==null && this.date7.getDate()==null && this.date8.getDate()==null && this.date9.getDate()==null && this.dateGlobal.getDate()==null)
                   {
                       JOptionPane.showMessageDialog(null, "Insert Required Dates OR Set a Global Date!","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
                   else
                   {
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   PreparedStatement stmt5 = null;
                   PreparedStatement stmt6 = null;
                   PreparedStatement stmt7 = null;
                   PreparedStatement stmt8 = null;
                   PreparedStatement stmt9 = null;
                   PreparedStatement stmt10 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0, x5=0, x6=0, x7=0, x8=0, x9=0, x10=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt5 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt5.setString(1, getItemId());
                   stmt5.setString(2, item[3]);
                   stmt5.setString(3, datee[3]);
                   stmt5.setString(4, supplier[3]);
                   stmt5.setString(5, qty[3]);
                   stmt5.setString(6, qty[3]);
                   stmt5.setString(7, pStatus);
                   stmt5.setString(8, pID);
                   x5 = stmt5.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt6 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt6.setString(1, getItemId());
                   stmt6.setString(2, item[4]);
                   stmt6.setString(3, datee[4]);
                   stmt6.setString(4, supplier[4]);
                   stmt6.setString(5, qty[4]);
                   stmt6.setString(6, qty[4]);
                   stmt6.setString(7, pStatus);
                   stmt6.setString(8, pID);
                   x6 = stmt6.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt7 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt7.setString(1, getItemId());
                   stmt7.setString(2, item[5]);
                   stmt7.setString(3, datee[5]);
                   stmt7.setString(4, supplier[5]);
                   stmt7.setString(5, qty[5]);
                   stmt7.setString(6, qty[5]);
                   stmt7.setString(7, pStatus);
                   stmt7.setString(8, pID);
                   x7 = stmt7.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt8 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt8.setString(1, getItemId());
                   stmt8.setString(2, item[6]);
                   stmt8.setString(3, datee[6]);
                   stmt8.setString(4, supplier[6]);
                   stmt8.setString(5, qty[6]);
                   stmt8.setString(6, qty[6]);
                   stmt8.setString(7, pStatus);
                   stmt8.setString(8, pID);
                   x8 = stmt8.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt9 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt9.setString(1, getItemId());
                   stmt9.setString(2, item[7]);
                   stmt9.setString(3, datee[7]);
                   stmt9.setString(4, supplier[7]);
                   stmt9.setString(5, qty[7]);
                   stmt9.setString(6, qty[7]);
                   stmt9.setString(7, pStatus);
                   stmt9.setString(8, pID);
                   x9 = stmt9.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt10 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt10.setString(1, getItemId());
                   stmt10.setString(2, item[8]);
                   stmt10.setString(3, datee[8]);
                   stmt10.setString(4, supplier[8]);
                   stmt10.setString(5, qty[8]);
                   stmt10.setString(6, qty[8]);
                   stmt10.setString(7, pStatus);
                   stmt10.setString(8, pID);
                   x10 = stmt10.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0 && x4>0 && x5>0 && x6>0 && x7>0 && x8>0 && x9>0 && x10>0)
                      JOptionPane.showMessageDialog(null, "Records inserted sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
               }
               
               //items 10..............................
               
               if(enteredItems==10)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                        datee[3] = getDateInString(dates[3]);
                        datee[4] = getDateInString(dates[4]);
                        datee[5] = getDateInString(dates[5]);
                        datee[6] = getDateInString(dates[6]);
                        datee[7] = getDateInString(dates[7]);
                        datee[8] = getDateInString(dates[8]);
                        datee[9] = getDateInString(dates[9]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                       datee[3] = getDateInString(globalDate);
                       datee[4] = getDateInString(globalDate);
                       datee[5] = getDateInString(globalDate);
                       datee[6] = getDateInString(globalDate);
                       datee[7] = getDateInString(globalDate);
                       datee[8] = getDateInString(globalDate);
                       datee[9] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal.getSelectedItem().toString();
                   }
                   
                   
                   if(this.date1.getDate()==null && this.date2.getDate()==null && this.date3.getDate()==null && this.date4.getDate()==null && this.date5.getDate()==null && this.date6.getDate()==null && this.date7.getDate()==null && this.date8.getDate()==null && this.date9.getDate()==null && this.date10.getDate()==null && this.dateGlobal.getDate()==null)
                   {
                       JOptionPane.showMessageDialog(null, "Insert Required Dates OR Set a Global Date!","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
                   else
                   {
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   PreparedStatement stmt5 = null;
                   PreparedStatement stmt6 = null;
                   PreparedStatement stmt7 = null;
                   PreparedStatement stmt8 = null;
                   PreparedStatement stmt9 = null;
                   PreparedStatement stmt10 = null;
                   PreparedStatement stmt11 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0, x5=0, x6=0, x7=0, x8=0, x9=0, x10=0, x11=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt5 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt5.setString(1, getItemId());
                   stmt5.setString(2, item[3]);
                   stmt5.setString(3, datee[3]);
                   stmt5.setString(4, supplier[3]);
                   stmt5.setString(5, qty[3]);
                   stmt5.setString(6, qty[3]);
                   stmt5.setString(7, pStatus);
                   stmt5.setString(8, pID);
                   x5 = stmt5.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt6 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt6.setString(1, getItemId());
                   stmt6.setString(2, item[4]);
                   stmt6.setString(3, datee[4]);
                   stmt6.setString(4, supplier[4]);
                   stmt6.setString(5, qty[4]);
                   stmt6.setString(6, qty[4]);
                   stmt6.setString(7, pStatus);
                   stmt6.setString(8, pID);
                   x6 = stmt6.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt7 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt7.setString(1, getItemId());
                   stmt7.setString(2, item[5]);
                   stmt7.setString(3, datee[5]);
                   stmt7.setString(4, supplier[5]);
                   stmt7.setString(5, qty[5]);
                   stmt7.setString(6, qty[5]);
                   stmt7.setString(7, pStatus);
                   stmt7.setString(8, pID);
                   x7 = stmt7.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt8 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt8.setString(1, getItemId());
                   stmt8.setString(2, item[6]);
                   stmt8.setString(3, datee[6]);
                   stmt8.setString(4, supplier[6]);
                   stmt8.setString(5, qty[6]);
                   stmt8.setString(6, qty[6]);
                   stmt8.setString(7, pStatus);
                   stmt8.setString(8, pID);
                   x8 = stmt8.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt9 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt9.setString(1, getItemId());
                   stmt9.setString(2, item[7]);
                   stmt9.setString(3, datee[7]);
                   stmt9.setString(4, supplier[7]);
                   stmt9.setString(5, qty[7]);
                   stmt9.setString(6, qty[7]);
                   stmt9.setString(7, pStatus);
                   stmt9.setString(8, pID);
                   x9 = stmt9.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt10 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt10.setString(1, getItemId());
                   stmt10.setString(2, item[8]);
                   stmt10.setString(3, datee[8]);
                   stmt10.setString(4, supplier[8]);
                   stmt10.setString(5, qty[8]);
                   stmt10.setString(6, qty[8]);
                   stmt10.setString(7, pStatus);
                   stmt10.setString(8, pID);
                   x10 = stmt10.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt11 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt11.setString(1, getItemId());
                   stmt11.setString(2, item[9]);
                   stmt11.setString(3, datee[9]);
                   stmt11.setString(4, supplier[9]);
                   stmt11.setString(5, qty[9]);
                   stmt11.setString(6, qty[9]);
                   stmt11.setString(7, pStatus);
                   stmt11.setString(8, pID);
                   x11 = stmt11.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                    
                   loadEditProjectList();
                   

                  if(x1>0 && x2>0 && x3>0 && x4>0 && x5>0 && x6>0 && x7>0 && x8>0 && x9>0 && x10>0 && x11>0)
                      JOptionPane.showMessageDialog(null, "Records inserted sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   }
               }
               
               
                this.txtProID.setText(getProjectID());
                this.txtItem1.setText("");
        this.txtItem2.setText("");
        this.txtItem3.setText("");
        this.txtItem4.setText("");
        this.txtItem5.setText("");
        this.txtItem6.setText("");
        this.txtItem7.setText("");
        this.txtItem8.setText("");
        this.txtItem9.setText("");
        this.txtItem10.setText("");
        
        this.txtQ1.setText("1");
        this.txtQ2.setText("1");
        this.txtQ3.setText("1");
        this.txtQ4.setText("1");
        this.txtQ5.setText("1");
        this.txtQ6.setText("1");
        this.txtQ7.setText("1");
        this.txtQ8.setText("1");
        this.txtQ9.setText("1");
        this.txtQ10.setText("1");
        this.dateGlobal.setCalendar(null);
        this.txtProName.setText("");
        
        this.date1.setCalendar(null);
        this.date2.setCalendar(null);
        this.date3.setCalendar(null);
        this.date4.setCalendar(null);
        this.date5.setCalendar(null);
        this.date7.setCalendar(null);
        this.date8.setCalendar(null);
        this.date9.setCalendar(null);
        this.date6.setCalendar(null);
        this.date10.setCalendar(null);
        this.jDateChooser1.setCalendar(null);
        
        this.cmbSupp1.setSelectedItem("Not Available");
        this.cmbSupp2.setSelectedItem("Not Available");
        this.cmbSupp3.setSelectedItem("Not Available");
        this.cmbSupp4.setSelectedItem("Not Available");
        this.cmbSupp5.setSelectedItem("Not Available");
        this.cmbSupp6.setSelectedItem("Not Available");
        this.cmbSupp7.setSelectedItem("Not Available");
        this.cmbSupp8.setSelectedItem("Not Available");
        this.cmbSupp9.setSelectedItem("Not Available");
        this.cmbSupp10.setSelectedItem("Not Available");
        this.cmbSuppGlobal.setSelectedItem("Not Available");
        
        loadEditProjectList();
            }
        }
        }
        
       //refresh delete table
        
        String query1 = "select pID as 'ID', pName as 'Name', pSdate as 'Start Date', pEndDate as 'End Date',  pGsupplier as 'Global Supplier', pStatus as 'Project Status'  from project where pAvailability = 'YES' ";

        ResultSet result= db1.executeSQLQuery(query1);

        try {

            int columCount = 0;
            ResultSetMetaData rsmd = result.getMetaData();
            Vector myVector = new Vector();
            columCount = rsmd.getColumnCount();
            for (int i = 1; i <= columCount; i++) {
                myVector.add(rsmd.getColumnLabel(i));
            }
            DefaultTableModel amodel = new DefaultTableModel(myVector, 0)/*0=row count*/ {
                @Override
                public boolean isCellEditable(int row, int column) {
                    //all cells false
                    return false;
                }
            };

            while (result.next()) {
                String[] rowData = new String[columCount];
                for (int i = 1; i <= columCount; i++) {
                    if (i == 1) {
                        String id = result.getString(i);
                        rowData[i - 1] = id.toUpperCase();
                    } else {
                        rowData[i - 1] = result.getString(i);
                    }
                }
                amodel.addRow(rowData);
            }

            tableSummaryProjects.setModel(amodel);

        } 
        
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error in Showing Data", "METROPOLITAN ENGINEERING (PVT) LTD", 1);
        }
                
    }//GEN-LAST:event_btnAddProjectActionPerformed

    private void btnAddProject1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddProject1ActionPerformed

        // TODO add your handling code here:
        
        // clear fields
        
        this.txtItem11.setText("");
        this.txtItem12.setText("");
        this.txtItem13.setText("");
        this.txtItem14.setText("");
        this.txtItem15.setText("");
        this.txtItem16.setText("");
        this.txtItem17.setText("");
        this.txtItem18.setText("");
        this.txtItem19.setText("");
        this.txtItem20.setText("");
        
        this.txtQ12.setText("");
        this.txtQ13.setText("");
        this.txtQ14.setText("");
        this.txtQ15.setText("");
        this.txtQ16.setText("");
        this.txtQ17.setText("");
        this.txtQ18.setText("");
        this.txtQ19.setText("");
        this.txtQ20.setText("");
        this.txtQ11.setText("");
        
   

        
        this.date11.setCalendar(null);
        this.date12.setCalendar(null);
        this.date13.setCalendar(null);
        this.date14.setCalendar(null);
        this.date15.setCalendar(null);
        this.date17.setCalendar(null);
        this.date18.setCalendar(null);
        this.date19.setCalendar(null);
        this.date16.setCalendar(null);
        this.date20.setCalendar(null);
        this.jDateChooser2.setCalendar(null);
        this.dateGlobal1.setCalendar(null);
        
        this.cmbSupp11.setSelectedItem("Not Available");
        this.cmbSupp12.setSelectedItem("Not Available");
        this.cmbSupp13.setSelectedItem("Not Available");
        this.cmbSupp14.setSelectedItem("Not Available");
        this.cmbSupp15.setSelectedItem("Not Available");
        this.cmbSupp16.setSelectedItem("Not Available");
        this.cmbSupp17.setSelectedItem("Not Available");
        this.cmbSupp18.setSelectedItem("Not Available");
        this.cmbSupp19.setSelectedItem("Not Available");
        this.cmbSupp20.setSelectedItem("Not Available");
        this.cmbSuppGlobal1.setSelectedItem("Not Available");
        
        
        
        
        //clear fields ends
        
        
        //load item numbers to array
        
        String iPid = this.txtProID1.getText().toString();
        
        int p1=0;
        
        String tt = "select * from item where iPID = '"+iPid+"'";
       
        
        ResultSet result111= db1.executeSQLQuery(tt);
        
        try
        {
            /*
         if(p1==1)
            {
            result111.next();
        
            this.txtItem11.setText(result111.getString("iName"));
            this.txtQ11.setText(result111.getString("iName"));
            
            }
            */
            
            for(int x=0; x<10; x++)
            {
                result111.next();
                
                itemNumber[x] = result111.getString("iID");
                
            }
            
        }
        catch(Exception e)
        {
            
        }
        
        
        // finish loading
        
        
        
        String selected = this.cmbProName.getSelectedItem().toString();
        
        
        
        String gen = "select * from project where pName = '"+selected+"'";
       
        
        ResultSet result1= db1.executeSQLQuery(gen);
        
        
        try
        {
        while(result1.next())
        {
            this.txtProID1.setText(result1.getString("pID"));
            startDate = (result1.getString("pSdate"));
            Date d = (convertStringToDate(result1.getString("pEndDate")));
            this.jDateChooser2.setDate(d);
            System.out.println(result1.getString("pGdate"));
            /*
            if(result1.getString("pGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result1.getString("pGdate");
                this.dateGlobal1.setDate(convertStringToDate(x));
            }
            */
            
        }
        
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(),"METROPOLITAN ENGINEERING (PVT) LTD", 1);
        }
        
        
        //check how many
        
        String gene = "select count(*) as 'field' from item where iPID = '"+this.txtProID1.getText().toString()+"'";
   
        int n1=0;
      
        
        ResultSet count1 = db1.executeSQLQuery(gene);
        
        try
        {
            if(count1.next())
            {
                n1 += Integer.parseInt(count1.getString("field"));
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(),"METROPOLITAN ENGINEERING (PVT) LTD", 1);
        }
        
        
        
        //load items
        
        String gen1 = "select * from item where iPID = '"+this.txtProID1.getText().toString()+"'";
       
        
        ResultSet result11= db1.executeSQLQuery(gen1);
        
        
        try
        {
            
            // 1..............
            if(n1==1)
            {
            result11.next();
        
            this.txtItem11.setText(result11.getString("iName"));
            this.txtQ11.setText(result11.getString("iQtyA"));
            this.cmbSupp11.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                System.out.println(x);
                this.date11.setDate(convertStringToDate(x));
            }
            
            }
            
            
            // 2 .....................
            
            if(n1==2)
            {
            result11.next();
            
            this.txtItem11.setText(result11.getString("iName"));
            this.txtQ11.setText(result11.getString("iQtyA"));
            this.cmbSupp11.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date11.setDate(convertStringToDate(x));
            }
            result11.next();
        
            this.txtItem12.setText(result11.getString("iName"));
            this.txtQ12.setText(result11.getString("iQtyA"));
            this.cmbSupp12.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date12.setDate(convertStringToDate(x));
            }
            }
            
            // 3 .....................
            
            if(n1==3)
            {
            result11.next();
            this.txtItem11.setText(result11.getString("iName"));
            this.txtQ11.setText(result11.getString("iQtyA"));
            this.cmbSupp11.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date11.setDate(convertStringToDate(x));
            }
            result11.next();
             this.txtItem12.setText(result11.getString("iName"));
            this.txtQ12.setText(result11.getString("iQtyA"));
            this.cmbSupp12.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date12.setDate(convertStringToDate(x));
            }
            result11.next();
        
            this.txtItem13.setText(result11.getString("iName"));
            this.txtQ13.setText(result11.getString("iQtyA"));
            this.cmbSupp13.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date13.setDate(convertStringToDate(x));
            }
            }
            
            // 4 .....................
            
            if(n1==4)
            {
            result11.next();
            this.txtItem11.setText(result11.getString("iName"));
            this.txtQ11.setText(result11.getString("iQtyA"));
            this.cmbSupp11.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date11.setDate(convertStringToDate(x));
            }
            result11.next();
             this.txtItem12.setText(result11.getString("iName"));
            this.txtQ12.setText(result11.getString("iQtyA"));
            this.cmbSupp12.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date12.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem13.setText(result11.getString("iName"));
            this.txtQ13.setText(result11.getString("iQtyA"));
            this.cmbSupp13.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date13.setDate(convertStringToDate(x));
            }
            result11.next();
            
        
            this.txtItem14.setText(result11.getString("iName"));
            this.txtQ14.setText(result11.getString("iQtyA"));
            this.cmbSupp14.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date14.setDate(convertStringToDate(x));
            }
            }
            
            // 5 .....................
            
            if(n1==5)
            {
            result11.next();
            this.txtItem11.setText(result11.getString("iName"));
            this.txtQ11.setText(result11.getString("iQtyA"));
            this.cmbSupp11.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date11.setDate(convertStringToDate(x));
            }
            result11.next();
             this.txtItem12.setText(result11.getString("iName"));
            this.txtQ12.setText(result11.getString("iQtyA"));
            this.cmbSupp12.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date12.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem13.setText(result11.getString("iName"));
            this.txtQ13.setText(result11.getString("iQtyA"));
            this.cmbSupp13.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date13.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem14.setText(result11.getString("iName"));
            this.txtQ14.setText(result11.getString("iQtyA"));
            this.cmbSupp14.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date14.setDate(convertStringToDate(x));
            }
            result11.next();
        
            this.txtItem15.setText(result11.getString("iName"));
            this.txtQ15.setText(result11.getString("iQtyA"));
            this.cmbSupp15.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date15.setDate(convertStringToDate(x));
            }
            }
            
            // 6 .....................
            
            if(n1==6)
            {
            result11.next();
            this.txtItem11.setText(result11.getString("iName"));
            this.txtQ11.setText(result11.getString("iQtyA"));
            this.cmbSupp11.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date11.setDate(convertStringToDate(x));
            }
            result11.next();
             this.txtItem12.setText(result11.getString("iName"));
            this.txtQ12.setText(result11.getString("iQtyA"));
            this.cmbSupp12.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date12.setDate(convertStringToDate(x));
            }
            result11.next();
            this.txtItem13.setText(result11.getString("iName"));
            this.txtQ13.setText(result11.getString("iQtyA"));
            this.cmbSupp13.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date13.setDate(convertStringToDate(x));
            }
            result11.next();
            this.txtItem14.setText(result11.getString("iName"));
            this.txtQ14.setText(result11.getString("iQtyA"));
            this.cmbSupp14.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date14.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem15.setText(result11.getString("iName"));
            this.txtQ15.setText(result11.getString("iQtyA"));
            this.cmbSupp15.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date15.setDate(convertStringToDate(x));
            }
            result11.next();
        
            this.txtItem16.setText(result11.getString("iName"));
            this.txtQ16.setText(result11.getString("iQtyA"));
            this.cmbSupp16.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date16.setDate(convertStringToDate(x));
            }
            }
            
            // 7 .....................
            
            if(n1==7)
            {
                
            
            result11.next();
            this.txtItem11.setText(result11.getString("iName"));
            this.txtQ11.setText(result11.getString("iQtyA"));
            this.cmbSupp11.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date11.setDate(convertStringToDate(x));
            }
            result11.next();
             this.txtItem12.setText(result11.getString("iName"));
            this.txtQ12.setText(result11.getString("iQtyA"));
            this.cmbSupp12.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date12.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem13.setText(result11.getString("iName"));
            this.txtQ13.setText(result11.getString("iQtyA"));
            this.cmbSupp13.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date13.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem14.setText(result11.getString("iName"));
            this.txtQ14.setText(result11.getString("iQtyA"));
            this.cmbSupp14.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date14.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem15.setText(result11.getString("iName"));
            this.txtQ15.setText(result11.getString("iQtyA"));
            this.cmbSupp15.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date15.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem16.setText(result11.getString("iName"));
            this.txtQ16.setText(result11.getString("iQtyA"));
            this.cmbSupp16.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date16.setDate(convertStringToDate(x));
            }
            result11.next();
        
            this.txtItem17.setText(result11.getString("iName"));
            this.txtQ17.setText(result11.getString("iQtyA"));
            this.cmbSupp17.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date17.setDate(convertStringToDate(x));
            }
            }
            
            // 8 .....................
            
            if(n1==8)
            {
            result11.next();
            this.txtItem11.setText(result11.getString("iName"));
            this.txtQ11.setText(result11.getString("iQtyA"));
            this.cmbSupp11.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date11.setDate(convertStringToDate(x));
            }
            result11.next();
             this.txtItem12.setText(result11.getString("iName"));
            this.txtQ12.setText(result11.getString("iQtyA"));
            this.cmbSupp12.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date12.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem13.setText(result11.getString("iName"));
            this.txtQ13.setText(result11.getString("iQtyA"));
            this.cmbSupp13.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date13.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem14.setText(result11.getString("iName"));
            this.txtQ14.setText(result11.getString("iQtyA"));
            this.cmbSupp14.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date14.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem15.setText(result11.getString("iName"));
            this.txtQ15.setText(result11.getString("iQtyA"));
            this.cmbSupp15.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date15.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem16.setText(result11.getString("iName"));
            this.txtQ16.setText(result11.getString("iQtyA"));
            this.cmbSupp16.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date16.setDate(convertStringToDate(x));
            }
            result11.next();
        
            this.txtItem17.setText(result11.getString("iName"));
            this.txtQ17.setText(result11.getString("iQtyA"));
            this.cmbSupp17.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date17.setDate(convertStringToDate(x));
            }
            result11.next();
            
        
            this.txtItem18.setText(result11.getString("iName"));
            this.txtQ18.setText(result11.getString("iQtyA"));
            this.cmbSupp18.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date18.setDate(convertStringToDate(x));
            }
            
            }
            // 9 .....................
            
            if(n1==9)
            {
            result11.next();
            this.txtItem11.setText(result11.getString("iName"));
            this.txtQ11.setText(result11.getString("iQtyA"));
            this.cmbSupp11.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date11.setDate(convertStringToDate(x));
            }
            result11.next();
             this.txtItem12.setText(result11.getString("iName"));
            this.txtQ12.setText(result11.getString("iQtyA"));
            this.cmbSupp12.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date12.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem13.setText(result11.getString("iName"));
            this.txtQ13.setText(result11.getString("iQtyA"));
            this.cmbSupp13.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date13.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem14.setText(result11.getString("iName"));
            this.txtQ14.setText(result11.getString("iQtyA"));
            this.cmbSupp14.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date14.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem15.setText(result11.getString("iName"));
            this.txtQ15.setText(result11.getString("iQtyA"));
            this.cmbSupp15.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date15.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem16.setText(result11.getString("iName"));
            this.txtQ16.setText(result11.getString("iQtyA"));
            this.cmbSupp16.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date16.setDate(convertStringToDate(x));
            }
            result11.next();
        
            this.txtItem17.setText(result11.getString("iName"));
            this.txtQ17.setText(result11.getString("iQtyA"));
            this.cmbSupp17.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date17.setDate(convertStringToDate(x));
            }
            result11.next();
            
        
            this.txtItem18.setText(result11.getString("iName"));
            this.txtQ18.setText(result11.getString("iQtyA"));
            this.cmbSupp18.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date18.setDate(convertStringToDate(x));
            }
            result11.next();
        
            this.txtItem19.setText(result11.getString("iName"));
            this.txtQ19.setText(result11.getString("iQtyA"));
            this.cmbSupp19.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date19.setDate(convertStringToDate(x));
            }
            
            }
            // 10 .....................
            
            if(n1==10)
            {
            result11.next();
            this.txtItem11.setText(result11.getString("iName"));
            this.txtQ11.setText(result11.getString("iQtyA"));
            this.cmbSupp11.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date11.setDate(convertStringToDate(x));
            }
            result11.next();
             this.txtItem12.setText(result11.getString("iName"));
            this.txtQ12.setText(result11.getString("iQtyA"));
            this.cmbSupp12.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date12.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem13.setText(result11.getString("iName"));
            this.txtQ13.setText(result11.getString("iQtyA"));
            this.cmbSupp13.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date13.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem14.setText(result11.getString("iName"));
            this.txtQ14.setText(result11.getString("iQtyA"));
            this.cmbSupp14.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date14.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem15.setText(result11.getString("iName"));
            this.txtQ15.setText(result11.getString("iQtyA"));
            this.cmbSupp15.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date15.setDate(convertStringToDate(x));
            }
            result11.next();
            
            this.txtItem16.setText(result11.getString("iName"));
            this.txtQ16.setText(result11.getString("iQtyA"));
            this.cmbSupp16.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date16.setDate(convertStringToDate(x));
            }
            result11.next();
        
            this.txtItem17.setText(result11.getString("iName"));
            this.txtQ17.setText(result11.getString("iQtyA"));
            this.cmbSupp17.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date17.setDate(convertStringToDate(x));
            }
            result11.next();
            
        
            this.txtItem18.setText(result11.getString("iName"));
            this.txtQ18.setText(result11.getString("iQtyA"));
            this.cmbSupp18.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date18.setDate(convertStringToDate(x));
            }
            result11.next();
        
            this.txtItem19.setText(result11.getString("iName"));
            this.txtQ19.setText(result11.getString("iQtyA"));
            this.cmbSupp19.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date19.setDate(convertStringToDate(x));
            }
            result11.next();
           
        
            this.txtItem20.setText(result11.getString("iName"));
            this.txtQ20.setText(result11.getString("iQtyA"));
            this.cmbSupp20.setSelectedItem(result11.getString("iSupplier"));
            if(result11.getString("iGdate").equals("00-00-00"))
            {
            }
            else
            {
                String x = result11.getString("iGdate");
                this.date20.setDate(convertStringToDate(x));
            }
        
            
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(),"METROPOLITAN ENGINEERING (PVT) LTD", 1);
        }
        
        
    }//GEN-LAST:event_btnAddProject1ActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
         //getting old todat
        
        int xxxx=JOptionPane.showConfirmDialog(null,"Editing project will restore default values on shipment arrivals. Do you want to continue?",
            "METROPOLITAN ENGINEERING (PVT) LTD",0,3 );
       
       if(xxxx==0)
       {
        
         String endDate = "1900/00/00";
        
        Date date;
        date = this.jDateChooser2.getDate();

        if(date == null)
        {
            //do nothing
        }
        else
            endDate = getDateInString(this.jDateChooser2.getDate());
        
        
           
           String adadine="fdsa";
           
           String selected = this.txtProID1.getText().toString();
        
        String gen = "select * from project where pID = '"+selected+"'";
       
        
        ResultSet result1= db1.executeSQLQuery(gen);
        
        
        try
        {
        while(result1.next())
        {
           
            
            adadine = getDateInString(result1.getDate("pSdate"));
            
           
           
        }
        
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(),"METROPOLITAN ENGINEERING (PVT) LTD!", 1);
        }
           
           //finihsed getting old today
        
        
        
        String key = this.txtProID1.getText().toString();
        
        
        
        //deleling records
        
        String queryd1 = "delete from item where iPID = '"+key+"'";
         String queryd2 = "delete from project where pID='"+key+"'";
           

           int xxx = db1.executeNonQuery(queryd1);
           int xx = db1.executeNonQuery(queryd2);
           
           /*
           if(xxx==-1 || xx==-1)
               JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","Error!", 1);
           else
               JOptionPane.showMessageDialog(null, "Records removed sucessfully! ","Sucessful!", 1);
           
           */
          
        //inserting data back
           
          
        
        
            String pID = selected;
            String pName =this.cmbProName.getSelectedItem().toString();
            String pSdate = adadine;
            
            String pGsupplier = this.cmbSuppGlobal1.getSelectedItem().toString();
            String pStatus = "pending";
            String pAvailability = "YES";
        
        
        
            if(this.txtItem11.getText().equals("") && this.txtItem12.getText().equals("") && this.txtItem13.getText().equals("") && this.txtItem14.getText().equals("") && this.txtItem15.getText().equals("") && this.txtItem16.getText().equals("") && this.txtItem17.getText().equals("") && this.txtItem18.getText().equals("") && this.txtItem19.getText().equals("") && this.txtItem20.getText().equals(""))
            {
                JOptionPane.showMessageDialog(null, "This project has no components! Insert atleast one component to continue!","METROPOLITAN ENGINEERING (PVT) LTD", 1);
            }
            else
            {
                
                Date dates[] = new Date[10];
                
                try
                {
                dates[0] = this.date11.getDate();
                dates[1] = this.date12.getDate();
                dates[2] = this.date13.getDate();
                dates[3] = this.date14.getDate();
                dates[4] = this.date15.getDate();
                dates[5] = this.date16.getDate();
                dates[6] = this.date17.getDate();
                dates[7] = this.date18.getDate();
                dates[8] = this.date19.getDate();
                dates[9] = this.date20.getDate();
                }
                catch(Exception e)
                {
                    System.out.println(e.getMessage());
                }
                
                String datee[] = new String[10];
                datee[0] = "00/00/00";
                datee[1] = "00/00/00";
                datee[2] = "00/00/00";
                datee[3] = "00/00/00";
                datee[4] = "00/00/00";
                datee[5] = "00/00/00";
                datee[6] = "00/00/00";
                datee[7] = "00/00/00";
                datee[8] = "00/00/00";
                datee[9] = "00/00/00";

                
                
                
                String qty[] = new String[10];
                qty[0] = this.txtQ11.getText().toString();
                qty[1] = this.txtQ12.getText().toString();
                qty[2] = this.txtQ13.getText().toString();
                qty[3] = this.txtQ14.getText().toString();
                qty[4] = this.txtQ15.getText().toString();
                qty[5] = this.txtQ16.getText().toString();
                qty[6] = this.txtQ17.getText().toString();
                qty[7] = this.txtQ18.getText().toString();
                qty[8] = this.txtQ19.getText().toString();
                qty[9] = this.txtQ20.getText().toString();
                
                String item[] = new String[10];
                item[0] = this.txtItem11.getText();
                item[1] = this.txtItem12.getText();
                item[2] = this.txtItem13.getText();
                item[3] = this.txtItem14.getText();
                item[4] = this.txtItem15.getText();
                item[5] = this.txtItem16.getText();
                item[6] = this.txtItem17.getText();
                item[7] = this.txtItem18.getText();
                item[8] = this.txtItem19.getText();
                item[9] = this.txtItem20.getText();
                
                
                String supplier[] = new String[10];
                supplier[0] = this.cmbSupp11.getSelectedItem().toString();
                supplier[1] = this.cmbSupp12.getSelectedItem().toString();
                supplier[2] = this.cmbSupp13.getSelectedItem().toString();
                supplier[3] = this.cmbSupp14.getSelectedItem().toString();
                supplier[4] = this.cmbSupp15.getSelectedItem().toString();
                supplier[5] = this.cmbSupp16.getSelectedItem().toString();
                supplier[6] = this.cmbSupp17.getSelectedItem().toString();
                supplier[7] = this.cmbSupp18.getSelectedItem().toString();
                supplier[8] = this.cmbSupp19.getSelectedItem().toString();
                supplier[9] = this.cmbSupp20.getSelectedItem().toString();
                
                Date globalDate = this.dateGlobal1.getDate();
                String dateGlobal = "1900/00/00";
                
                String supplierGlobal = this.cmbSuppGlobal1.getSelectedItem().toString();
                
                //calculate entered items
                
                int enteredItems = 0;
                
                for(int x=0; x<10; x++)
                {
                    if(!item[x].equals(""))
                        enteredItems +=1;
                }
                
                System.out.println(enteredItems);
                
                
                //generating queryies
                
                //item 1......................................................
                
               if(enteredItems==1)
               {
                   
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                   }
                   else
                   {
                       
                       dateGlobal = getDateInString(globalDate);
                       datee[0] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal1.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal1.getSelectedItem().toString();
                   }
                   
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   
                   int x1=0, x2=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0)
                      JOptionPane.showMessageDialog(null, "Records Updated sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD!", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);

               }
               
               //item 2............................................................................................
               
               if(enteredItems==2)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal1.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal1.getSelectedItem().toString();
                   }
                   
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   
                   int x1=0, x2=0, x3=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0)
                      JOptionPane.showMessageDialog(null, "Records Updated sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
               }
               
               //item 3 ...................................................
               
               
               if(enteredItems==3)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal1.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal1.getSelectedItem().toString();
                   }
                   
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0 && x4>0)
                      JOptionPane.showMessageDialog(null, "Records Updated sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
               }
               
               //item 4.......................................................
               
               if(enteredItems==4)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                        datee[3] = getDateInString(dates[3]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                       datee[3] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal1.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal1.getSelectedItem().toString();
                   }
                   
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   PreparedStatement stmt5 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0, x5=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt5 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt5.setString(1, getItemId());
                   stmt5.setString(2, item[3]);
                   stmt5.setString(3, datee[3]);
                   stmt5.setString(4, supplier[3]);
                   stmt5.setString(5, qty[3]);
                   stmt5.setString(6, qty[3]);
                   stmt5.setString(7, pStatus);
                   stmt5.setString(8, pID);
                   x5 = stmt5.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0 && x4>0 && x5>0)
                      JOptionPane.showMessageDialog(null, "Records Updated sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
               }
               
               //item 5 ................................................................
               
               if(enteredItems==5)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                        datee[3] = getDateInString(dates[3]);
                        datee[4] = getDateInString(dates[4]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                       datee[3] = getDateInString(globalDate);
                       datee[4] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal1.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal1.getSelectedItem().toString();
                   }
                   
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   PreparedStatement stmt5 = null;
                   PreparedStatement stmt6 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0, x5=0, x6=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt5 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt5.setString(1, getItemId());
                   stmt5.setString(2, item[3]);
                   stmt5.setString(3, datee[3]);
                   stmt5.setString(4, supplier[3]);
                   stmt5.setString(5, qty[3]);
                   stmt5.setString(6, qty[3]);
                   stmt5.setString(7, pStatus);
                   stmt5.setString(8, pID);
                   x5 = stmt5.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt6 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt6.setString(1, getItemId());
                   stmt6.setString(2, item[4]);
                   stmt6.setString(3, datee[4]);
                   stmt6.setString(4, supplier[4]);
                   stmt6.setString(5, qty[4]);
                   stmt6.setString(6, qty[4]);
                   stmt6.setString(7, pStatus);
                   stmt6.setString(8, pID);
                   x6 = stmt6.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0 && x4>0 && x5>0 && x6>0)
                      JOptionPane.showMessageDialog(null, "Records Updated sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
               }
               
               //item 6..............................................................
               
               
               if(enteredItems==6)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                        datee[3] = getDateInString(dates[3]);
                        datee[4] = getDateInString(dates[4]);
                        datee[5] = getDateInString(dates[5]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                       datee[3] = getDateInString(globalDate);
                       datee[4] = getDateInString(globalDate);
                       datee[5] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal1.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal1.getSelectedItem().toString();
                   }
                   
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   PreparedStatement stmt5 = null;
                   PreparedStatement stmt6 = null;
                   PreparedStatement stmt7 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0, x5=0, x6=0, x7=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt5 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt5.setString(1, getItemId());
                   stmt5.setString(2, item[3]);
                   stmt5.setString(3, datee[3]);
                   stmt5.setString(4, supplier[3]);
                   stmt5.setString(5, qty[3]);
                   stmt5.setString(6, qty[3]);
                   stmt5.setString(7, pStatus);
                   stmt5.setString(8, pID);
                   x5 = stmt5.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt6 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt6.setString(1, getItemId());
                   stmt6.setString(2, item[4]);
                   stmt6.setString(3, datee[4]);
                   stmt6.setString(4, supplier[4]);
                   stmt6.setString(5, qty[4]);
                   stmt6.setString(6, qty[4]);
                   stmt6.setString(7, pStatus);
                   stmt6.setString(8, pID);
                   x6 = stmt6.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt7 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt7.setString(1, getItemId());
                   stmt7.setString(2, item[5]);
                   stmt7.setString(3, datee[5]);
                   stmt7.setString(4, supplier[5]);
                   stmt7.setString(5, qty[5]);
                   stmt7.setString(6, qty[5]);
                   stmt7.setString(7, pStatus);
                   stmt7.setString(8, pID);
                   x7 = stmt7.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0 && x4>0 && x5>0 && x6>0 && x7>0)
                      JOptionPane.showMessageDialog(null, "Records Updated sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
               }
               
               //Item 7 ........................................
               
               if(enteredItems==7)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                        datee[3] = getDateInString(dates[3]);
                        datee[4] = getDateInString(dates[4]);
                        datee[5] = getDateInString(dates[5]);
                        datee[6] = getDateInString(dates[6]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                       datee[3] = getDateInString(globalDate);
                       datee[4] = getDateInString(globalDate);
                       datee[5] = getDateInString(globalDate);
                       datee[6] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal1.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal1.getSelectedItem().toString();
                   }
                   
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   PreparedStatement stmt5 = null;
                   PreparedStatement stmt6 = null;
                   PreparedStatement stmt7 = null;
                   PreparedStatement stmt8 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0, x5=0, x6=0, x7=0, x8=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt5 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt5.setString(1, getItemId());
                   stmt5.setString(2, item[3]);
                   stmt5.setString(3, datee[3]);
                   stmt5.setString(4, supplier[3]);
                   stmt5.setString(5, qty[3]);
                   stmt5.setString(6, qty[3]);
                   stmt5.setString(7, pStatus);
                   stmt5.setString(8, pID);
                   x5 = stmt5.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt6 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt6.setString(1, getItemId());
                   stmt6.setString(2, item[4]);
                   stmt6.setString(3, datee[4]);
                   stmt6.setString(4, supplier[4]);
                   stmt6.setString(5, qty[4]);
                   stmt6.setString(6, qty[4]);
                   stmt6.setString(7, pStatus);
                   stmt6.setString(8, pID);
                   x6 = stmt6.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt7 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt7.setString(1, getItemId());
                   stmt7.setString(2, item[5]);
                   stmt7.setString(3, datee[5]);
                   stmt7.setString(4, supplier[5]);
                   stmt7.setString(5, qty[5]);
                   stmt7.setString(6, qty[5]);
                   stmt7.setString(7, pStatus);
                   stmt7.setString(8, pID);
                   x7 = stmt7.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt8 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt8.setString(1, getItemId());
                   stmt8.setString(2, item[6]);
                   stmt8.setString(3, datee[6]);
                   stmt8.setString(4, supplier[6]);
                   stmt8.setString(5, qty[6]);
                   stmt8.setString(6, qty[6]);
                   stmt8.setString(7, pStatus);
                   stmt8.setString(8, pID);
                   x8 = stmt8.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0 && x4>0 && x5>0 && x6>0 && x7>0 && x8>0)
                      JOptionPane.showMessageDialog(null, "Records Updated sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
               }
               
               //item 8 ....................................................
               
               if(enteredItems==8)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                        datee[3] = getDateInString(dates[3]);
                        datee[4] = getDateInString(dates[4]);
                        datee[5] = getDateInString(dates[5]);
                        datee[6] = getDateInString(dates[6]);
                        datee[7] = getDateInString(dates[7]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                       datee[3] = getDateInString(globalDate);
                       datee[4] = getDateInString(globalDate);
                       datee[5] = getDateInString(globalDate);
                       datee[6] = getDateInString(globalDate);
                       datee[7] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal1.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal1.getSelectedItem().toString();
                   }
                   
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   PreparedStatement stmt5 = null;
                   PreparedStatement stmt6 = null;
                   PreparedStatement stmt7 = null;
                   PreparedStatement stmt8 = null;
                   PreparedStatement stmt9 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0, x5=0, x6=0, x7=0, x8=0, x9=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt5 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt5.setString(1, getItemId());
                   stmt5.setString(2, item[3]);
                   stmt5.setString(3, datee[3]);
                   stmt5.setString(4, supplier[3]);
                   stmt5.setString(5, qty[3]);
                   stmt5.setString(6, qty[3]);
                   stmt5.setString(7, pStatus);
                   stmt5.setString(8, pID);
                   x5 = stmt5.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt6 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt6.setString(1, getItemId());
                   stmt6.setString(2, item[4]);
                   stmt6.setString(3, datee[4]);
                   stmt6.setString(4, supplier[4]);
                   stmt6.setString(5, qty[4]);
                   stmt6.setString(6, qty[4]);
                   stmt6.setString(7, pStatus);
                   stmt6.setString(8, pID);
                   x6 = stmt6.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt7 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt7.setString(1, getItemId());
                   stmt7.setString(2, item[5]);
                   stmt7.setString(3, datee[5]);
                   stmt7.setString(4, supplier[5]);
                   stmt7.setString(5, qty[5]);
                   stmt7.setString(6, qty[5]);
                   stmt7.setString(7, pStatus);
                   stmt7.setString(8, pID);
                   x7 = stmt7.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt8 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt8.setString(1, getItemId());
                   stmt8.setString(2, item[6]);
                   stmt8.setString(3, datee[6]);
                   stmt8.setString(4, supplier[6]);
                   stmt8.setString(5, qty[6]);
                   stmt8.setString(6, qty[6]);
                   stmt8.setString(7, pStatus);
                   stmt8.setString(8, pID);
                   x8 = stmt8.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt9 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt9.setString(1, getItemId());
                   stmt9.setString(2, item[7]);
                   stmt9.setString(3, datee[7]);
                   stmt9.setString(4, supplier[7]);
                   stmt9.setString(5, qty[7]);
                   stmt9.setString(6, qty[7]);
                   stmt9.setString(7, pStatus);
                   stmt9.setString(8, pID);
                   x9 = stmt9.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0 && x4>0 && x5>0 && x6>0 && x7>0 && x8>0 && x9>0)
                      JOptionPane.showMessageDialog(null, "Records Updated sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
               }
               
               //items 9 ................................................
               
               if(enteredItems==9)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                        datee[3] = getDateInString(dates[3]);
                        datee[4] = getDateInString(dates[4]);
                        datee[5] = getDateInString(dates[5]);
                        datee[6] = getDateInString(dates[6]);
                        datee[7] = getDateInString(dates[7]);
                        datee[8] = getDateInString(dates[8]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                       datee[3] = getDateInString(globalDate);
                       datee[4] = getDateInString(globalDate);
                       datee[5] = getDateInString(globalDate);
                       datee[6] = getDateInString(globalDate);
                       datee[7] = getDateInString(globalDate);
                       datee[8] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal1.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal1.getSelectedItem().toString();
                   }
                   
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   PreparedStatement stmt5 = null;
                   PreparedStatement stmt6 = null;
                   PreparedStatement stmt7 = null;
                   PreparedStatement stmt8 = null;
                   PreparedStatement stmt9 = null;
                   PreparedStatement stmt10 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0, x5=0, x6=0, x7=0, x8=0, x9=0, x10=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt5 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt5.setString(1, getItemId());
                   stmt5.setString(2, item[3]);
                   stmt5.setString(3, datee[3]);
                   stmt5.setString(4, supplier[3]);
                   stmt5.setString(5, qty[3]);
                   stmt5.setString(6, qty[3]);
                   stmt5.setString(7, pStatus);
                   stmt5.setString(8, pID);
                   x5 = stmt5.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt6 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt6.setString(1, getItemId());
                   stmt6.setString(2, item[4]);
                   stmt6.setString(3, datee[4]);
                   stmt6.setString(4, supplier[4]);
                   stmt6.setString(5, qty[4]);
                   stmt6.setString(6, qty[4]);
                   stmt6.setString(7, pStatus);
                   stmt6.setString(8, pID);
                   x6 = stmt6.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt7 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt7.setString(1, getItemId());
                   stmt7.setString(2, item[5]);
                   stmt7.setString(3, datee[5]);
                   stmt7.setString(4, supplier[5]);
                   stmt7.setString(5, qty[5]);
                   stmt7.setString(6, qty[5]);
                   stmt7.setString(7, pStatus);
                   stmt7.setString(8, pID);
                   x7 = stmt7.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt8 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt8.setString(1, getItemId());
                   stmt8.setString(2, item[6]);
                   stmt8.setString(3, datee[6]);
                   stmt8.setString(4, supplier[6]);
                   stmt8.setString(5, qty[6]);
                   stmt8.setString(6, qty[6]);
                   stmt8.setString(7, pStatus);
                   stmt8.setString(8, pID);
                   x8 = stmt8.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt9 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt9.setString(1, getItemId());
                   stmt9.setString(2, item[7]);
                   stmt9.setString(3, datee[7]);
                   stmt9.setString(4, supplier[7]);
                   stmt9.setString(5, qty[7]);
                   stmt9.setString(6, qty[7]);
                   stmt9.setString(7, pStatus);
                   stmt9.setString(8, pID);
                   x9 = stmt9.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt10 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt10.setString(1, getItemId());
                   stmt10.setString(2, item[8]);
                   stmt10.setString(3, datee[8]);
                   stmt10.setString(4, supplier[8]);
                   stmt10.setString(5, qty[8]);
                   stmt10.setString(6, qty[8]);
                   stmt10.setString(7, pStatus);
                   stmt10.setString(8, pID);
                   x10 = stmt10.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }


                  if(x1>0 && x2>0 && x3>0 && x4>0 && x5>0 && x6>0 && x7>0 && x8>0 && x9>0 && x10>0)
                      JOptionPane.showMessageDialog(null, "Records Updated sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
               }
               
               //items 10..............................
               
               if(enteredItems==10)
               {
                   if(globalDate==null)
                   {
                        dateGlobal = "1900/00/00";
                        datee[0] = getDateInString(dates[0]);
                        datee[1] = getDateInString(dates[1]);
                        datee[2] = getDateInString(dates[2]);
                        datee[3] = getDateInString(dates[3]);
                        datee[4] = getDateInString(dates[4]);
                        datee[5] = getDateInString(dates[5]);
                        datee[6] = getDateInString(dates[6]);
                        datee[7] = getDateInString(dates[7]);
                        datee[8] = getDateInString(dates[8]);
                        datee[9] = getDateInString(dates[9]);
                   }
                   else
                   {
                       
                     
                       datee[0] = getDateInString(globalDate);
                       datee[1] = getDateInString(globalDate);
                       datee[2] = getDateInString(globalDate);
                       datee[3] = getDateInString(globalDate);
                       datee[4] = getDateInString(globalDate);
                       datee[5] = getDateInString(globalDate);
                       datee[6] = getDateInString(globalDate);
                       datee[7] = getDateInString(globalDate);
                       datee[8] = getDateInString(globalDate);
                       datee[9] = getDateInString(globalDate);
                      
                    }
                   
                   if(!this.cmbSuppGlobal1.getSelectedItem().toString().equals("Not Available"))
                   {
                       for(int x=0; x<10; x++)
                           supplier[x] = this.cmbSuppGlobal1.getSelectedItem().toString();
                   }
                   
                   
                   PreparedStatement stmt1 = null;
                   PreparedStatement stmt2 = null;
                   PreparedStatement stmt3 = null;
                   PreparedStatement stmt4 = null;
                   PreparedStatement stmt5 = null;
                   PreparedStatement stmt6 = null;
                   PreparedStatement stmt7 = null;
                   PreparedStatement stmt8 = null;
                   PreparedStatement stmt9 = null;
                   PreparedStatement stmt10 = null;
                   PreparedStatement stmt11 = null;
                   
                   int x1=0, x2=0, x3=0, x4=0, x5=0, x6=0, x7=0, x8=0, x9=0, x10=0, x11=0;
                   try{
                   stmt1 = con1.prepareStatement("INSERT INTO project values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt1.setString(1, pID);
                   stmt1.setString(2, pName);
                   stmt1.setString(3, pSdate);
                   stmt1.setString(4, dateGlobal);
                   stmt1.setString(5, pGsupplier);
                   stmt1.setString(6, pStatus);
                   stmt1.setString(7, pAvailability);
                   stmt1.setString(8, endDate);
                   x1 = stmt1.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt2 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt2.setString(1, getItemId());
                   stmt2.setString(2, item[0]);
                   stmt2.setString(3, datee[0]);
                   stmt2.setString(4, supplier[0]);
                   stmt2.setString(5, qty[0]);
                   stmt2.setString(6, qty[0]);
                   stmt2.setString(7, pStatus);
                   stmt2.setString(8, pID);
                   x2 = stmt2.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt3 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt3.setString(1, getItemId());
                   stmt3.setString(2, item[1]);
                   stmt3.setString(3, datee[1]);
                   stmt3.setString(4, supplier[1]);
                   stmt3.setString(5, qty[1]);
                   stmt3.setString(6, qty[1]);
                   stmt3.setString(7, pStatus);
                   stmt3.setString(8, pID);
                   x3 = stmt3.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt4 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt4.setString(1, getItemId());
                   stmt4.setString(2, item[2]);
                   stmt4.setString(3, datee[2]);
                   stmt4.setString(4, supplier[2]);
                   stmt4.setString(5, qty[2]);
                   stmt4.setString(6, qty[2]);
                   stmt4.setString(7, pStatus);
                   stmt4.setString(8, pID);
                   x4 = stmt4.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt5 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt5.setString(1, getItemId());
                   stmt5.setString(2, item[3]);
                   stmt5.setString(3, datee[3]);
                   stmt5.setString(4, supplier[3]);
                   stmt5.setString(5, qty[3]);
                   stmt5.setString(6, qty[3]);
                   stmt5.setString(7, pStatus);
                   stmt5.setString(8, pID);
                   x5 = stmt5.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt6 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt6.setString(1, getItemId());
                   stmt6.setString(2, item[4]);
                   stmt6.setString(3, datee[4]);
                   stmt6.setString(4, supplier[4]);
                   stmt6.setString(5, qty[4]);
                   stmt6.setString(6, qty[4]);
                   stmt6.setString(7, pStatus);
                   stmt6.setString(8, pID);
                   x6 = stmt6.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt7 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt7.setString(1, getItemId());
                   stmt7.setString(2, item[5]);
                   stmt7.setString(3, datee[5]);
                   stmt7.setString(4, supplier[5]);
                   stmt7.setString(5, qty[5]);
                   stmt7.setString(6, qty[5]);
                   stmt7.setString(7, pStatus);
                   stmt7.setString(8, pID);
                   x7 = stmt7.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt8 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt8.setString(1, getItemId());
                   stmt8.setString(2, item[6]);
                   stmt8.setString(3, datee[6]);
                   stmt8.setString(4, supplier[6]);
                   stmt8.setString(5, qty[6]);
                   stmt8.setString(6, qty[6]);
                   stmt8.setString(7, pStatus);
                   stmt8.setString(8, pID);
                   x8 = stmt8.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt9 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt9.setString(1, getItemId());
                   stmt9.setString(2, item[7]);
                   stmt9.setString(3, datee[7]);
                   stmt9.setString(4, supplier[7]);
                   stmt9.setString(5, qty[7]);
                   stmt9.setString(6, qty[7]);
                   stmt9.setString(7, pStatus);
                   stmt9.setString(8, pID);
                   x9 = stmt9.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt10 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt10.setString(1, getItemId());
                   stmt10.setString(2, item[8]);
                   stmt10.setString(3, datee[8]);
                   stmt10.setString(4, supplier[8]);
                   stmt10.setString(5, qty[8]);
                   stmt10.setString(6, qty[8]);
                   stmt10.setString(7, pStatus);
                   stmt10.setString(8, pID);
                   x10 = stmt10.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                   
                   try{
                   stmt11 = con1.prepareStatement("INSERT INTO item values(?, ?, ?, ?, ?, ?, ?, ?)");
                   stmt11.setString(1, getItemId());
                   stmt11.setString(2, item[9]);
                   stmt11.setString(3, datee[9]);
                   stmt11.setString(4, supplier[9]);
                   stmt11.setString(5, qty[9]);
                   stmt11.setString(6, qty[9]);
                   stmt11.setString(7, pStatus);
                   stmt11.setString(8, pID);
                   x11 = stmt11.executeUpdate();


                   }
                   catch(Exception e)
                   {
                       System.out.println(e.getMessage());
                   }
                    
                   loadEditProjectList();
                   

                  if(x1>0 && x2>0 && x3>0 && x4>0 && x5>0 && x6>0 && x7>0 && x8>0 && x9>0 && x10>0 && x11>0)
                      JOptionPane.showMessageDialog(null, "Records Updated sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
                   else
                       JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
               }
               
               
                
        
        
            }
        
        
       
                
           
           //inserting ends here
        
           
        
        loadEditProjectList();
        
    }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        
        int x=JOptionPane.showConfirmDialog(null,"Are you sure you want to delete this PROJECT?",
            "METROPOLITAN ENGINEERING (PVT) LTD",0,3 );
       
       if(x==0)
       {
        
        int x1 = 0, x2=0;
           try{
           
           String gen = this.selectedItem;
               
           PreparedStatement stmt1 = null;
           PreparedStatement stmt2 = null;
           
           
           
           
           stmt1 = con1.prepareStatement("update project set pAvailability='NO' where pID=? ");
           
           stmt1.setString(1, gen);
           x1 = stmt1.executeUpdate();
    
           
           
           
           }
           catch(Exception e)
           {
               System.out.println(e.getMessage());
           }
       
           
        
          if(x1>0 )
          {
              JOptionPane.showMessageDialog(null, "Record deleted sucessfully! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
              
               String query1 = "select pID as 'ID', pName as 'Name', pSdate as 'Start Date', pEndDate as 'End Date',  pGsupplier as 'Global Supplier', pStatus as 'Project Status'  from project where pAvailability = 'YES' ";


        ResultSet result= db1.executeSQLQuery(query1);

        try {

            int columCount = 0;
            ResultSetMetaData rsmd = result.getMetaData();
            Vector myVector = new Vector();
            columCount = rsmd.getColumnCount();
            for (int i = 1; i <= columCount; i++) {
                myVector.add(rsmd.getColumnLabel(i));
            }
            DefaultTableModel amodel = new DefaultTableModel(myVector, 0)/*0=row count*/ {
                @Override
                public boolean isCellEditable(int row, int column) {
                    //all cells false
                    return false;
                }
            };

            while (result.next()) {
                String[] rowData = new String[columCount];
                for (int i = 1; i <= columCount; i++) {
                    if (i == 1) {
                        String id = result.getString(i);
                        rowData[i - 1] = id.toUpperCase();
                    } else {
                        rowData[i - 1] = result.getString(i);
                    }
                }
                amodel.addRow(rowData);
            }

            tableSummaryProjects.setModel(amodel);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error in Showing Data", "METROPOLITAN ENGINEERING (PVT) LTD", 1);
        }
        
               
         
          }
           else
               JOptionPane.showMessageDialog(null, "Error in Database. Please Reconnect! ","METROPOLITAN ENGINEERING (PVT) LTD", 1);
          
          loadEditProjectList();
       }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        
        this.txtProID.setText(getProjectID());
        
        this.txtItem1.setText("");
        this.txtItem2.setText("");
        this.txtItem3.setText("");
        this.txtItem4.setText("");
        this.txtItem5.setText("");
        this.txtItem6.setText("");
        this.txtItem7.setText("");
        this.txtItem8.setText("");
        this.txtItem9.setText("");
        this.txtItem10.setText("");
        
        this.txtQ1.setText("");
        this.txtQ2.setText("");
        this.txtQ3.setText("");
        this.txtQ4.setText("");
        this.txtQ5.setText("");
        this.txtQ6.setText("");
        this.txtQ7.setText("");
        this.txtQ8.setText("");
        this.txtQ9.setText("");
        this.txtQ10.setText("");
        
        this.dateGlobal.setCalendar(null);
        
    }//GEN-LAST:event_btnClearActionPerformed

    private void cmbProNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbProNameActionPerformed

    private void tableSummaryProjectsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSummaryProjectsMouseClicked
        // TODO add your handling code here:
        
        int a=this.tableSummaryProjects.getSelectedRow();
             String c=tableSummaryProjects.getValueAt(a, 0).toString();
             this.selectedItem = c;
    }//GEN-LAST:event_tableSummaryProjectsMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        
        if (Data.Login.getPre_UI_type() == 1 || Data.Login.getPre_UI_type() == 2) {
            animation_exit a = new animation_exit();
            a.start();
            try {
                a.join();
            } catch (InterruptedException ex) {
                
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        this.txtProName.setText("Mahddagdfvgajana Bankings");
        this.txtItem1.setText("Generator");
        this.txtItem2.setText("Alternator");
        this.txtItem3.setText("Switch Panel");
        this.txtItem4.setText("Wire Harness");
        this.txtItem5.setText("Engine");
        this.txtItem6.setText("Canopy");
        this.txtItem7.setText("Wiring Box");
        this.txtItem8.setText("Amphere Meter");
        this.txtItem9.setText("Voltage Regulator");
        //this.txtItem10.setText("Voltage Stablizer");
        
        this.txtQ1.setText("2");
        this.txtQ2.setText("2");
        this.txtQ3.setText("4");
        this.txtQ4.setText("6");
        this.txtQ5.setText("2");
        this.txtQ6.setText("2");
        this.txtQ7.setText("4");
        this.txtQ8.setText("8");
        this.txtQ9.setText("3");
       // this.txtQ10.setText("2");
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    
    // my own methods
    
    public String getDateInString(Date d)
    {
     
        String year = Integer.toString(d.getYear()+1900);
        String month = Integer.toString(d.getMonth()+1);
        String date = Integer.toString(d.getDate());
        
        String temp = year+"/"+month+"/"+date;
        return temp;
    }
    
    public Date convertStringToDate(String s)
    {
        
        StringTokenizer temp = new StringTokenizer(s, "-");
        int year = Integer.parseInt(temp.nextToken());
        int month = Integer.parseInt(temp.nextToken());
        int date = Integer.parseInt(temp.nextToken());
        
        Date d = new Date(year-1900, month-1, date);
        
        System.out.println(Integer.toString(year));
        
       // Date dd = new Date();
        return d;
    }
    
     public Date convertStringToDate2(String s)
    {
        
        StringTokenizer temp = new StringTokenizer(s, "/");
        int year = Integer.parseInt(temp.nextToken());
        int month = Integer.parseInt(temp.nextToken());
        int date = Integer.parseInt(temp.nextToken());
        
        Date d = new Date(year-1900, month-1, date);
        
        System.out.println(Integer.toString(year));
        
       // Date dd = new Date();
        return d;
    }
    
    public String getItemID()
    {
        String gen = "select count(*) as 'field' from item";
   
        int n1=0;
      
        
        ResultSet count1 = db1.executeSQLQuery(gen);
        
        try
        {
            if(count1.next())
            {
                n1 += Integer.parseInt(count1.getString("field"));
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(),"METROPOLITAN ENGINEERING (PVT) LTD", 1);
        }
        
        
        //this.jTextField1.setText("Gen"+Integer.toString(n1));
        
        return Integer.toString(n1);
    }
    
    public void loadSuppliers()
    {
        String na = "Not Available";
        
        this.cmbSupp1.removeAllItems();
        this.cmbSupp2.removeAllItems();
        this.cmbSupp3.removeAllItems();
        this.cmbSupp4.removeAllItems();
        this.cmbSupp5.removeAllItems();
        this.cmbSupp6.removeAllItems();
        this.cmbSupp7.removeAllItems();
        this.cmbSupp8.removeAllItems();
        this.cmbSupp9.removeAllItems();
        this.cmbSupp10.removeAllItems();
        this.cmbSupp11.removeAllItems();
        this.cmbSupp12.removeAllItems();
        this.cmbSupp13.removeAllItems();
        this.cmbSupp14.removeAllItems();
        this.cmbSupp15.removeAllItems();
        this.cmbSupp16.removeAllItems();
        this.cmbSupp17.removeAllItems();
        this.cmbSupp18.removeAllItems();
        this.cmbSupp19.removeAllItems();
        this.cmbSupp20.removeAllItems();
        this.cmbSuppGlobal.removeAllItems();
        this.cmbSuppGlobal1.removeAllItems();
        
                this.cmbSupp1.addItem(na);
                this.cmbSupp2.addItem(na);
                this.cmbSupp3.addItem(na);
                this.cmbSupp4.addItem(na);
                this.cmbSupp5.addItem(na);
                this.cmbSupp6.addItem(na);
                this.cmbSupp7.addItem(na);
                this.cmbSupp8.addItem(na);
                this.cmbSupp9.addItem(na);
                this.cmbSupp10.addItem(na);
                this.cmbSupp11.addItem(na);
                this.cmbSupp12.addItem(na);
                this.cmbSupp13.addItem(na);
                this.cmbSupp14.addItem(na);
                this.cmbSupp15.addItem(na);
                this.cmbSupp16.addItem(na);
                this.cmbSupp17.addItem(na);
                this.cmbSupp18.addItem(na);
                this.cmbSupp19.addItem(na);
                this.cmbSupp20.addItem(na);
                this.cmbSuppGlobal.addItem(na);
                this.cmbSuppGlobal1.addItem(na);
        
        
        String proList = "select sName as 'field' from supplier where sName != 'deleted'";
   
        
      
        
        ResultSet countList = db1.executeSQLQuery(proList);
        
        try
        {
            while(countList.next())
            {
                //n1 += Integer.parseInt(count1.getString("field"));
                this.cmbSupp1.addItem(countList.getString("field"));
                this.cmbSupp2.addItem(countList.getString("field"));
                this.cmbSupp3.addItem(countList.getString("field"));
                this.cmbSupp4.addItem(countList.getString("field"));
                this.cmbSupp5.addItem(countList.getString("field"));
                this.cmbSupp6.addItem(countList.getString("field"));
                this.cmbSupp7.addItem(countList.getString("field"));
                this.cmbSupp8.addItem(countList.getString("field"));
                this.cmbSupp9.addItem(countList.getString("field"));
                this.cmbSupp10.addItem(countList.getString("field"));
                this.cmbSupp11.addItem(countList.getString("field"));
                this.cmbSupp12.addItem(countList.getString("field"));
                this.cmbSupp13.addItem(countList.getString("field"));
                this.cmbSupp14.addItem(countList.getString("field"));
                this.cmbSupp15.addItem(countList.getString("field"));
                this.cmbSupp16.addItem(countList.getString("field"));
                this.cmbSupp17.addItem(countList.getString("field"));
                this.cmbSupp18.addItem(countList.getString("field"));
                this.cmbSupp19.addItem(countList.getString("field"));
                this.cmbSupp20.addItem(countList.getString("field"));
                this.cmbSuppGlobal.addItem(countList.getString("field"));
                this.cmbSuppGlobal1.addItem(countList.getString("field"));
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(),"METROPOLITAN ENGINEERING (PVT) LTD", 1);
        }
    }
    
    public String getProjectID()
    {
        String gen = "select count(*) as 'field' from project";
   
        int n1=1;
      
        
        ResultSet count1 = db1.executeSQLQuery(gen);
        
        try
        {
            if(count1.next())
            {
                n1 += Integer.parseInt(count1.getString("field"));
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(),"METROPOLITAN ENGINEERING (PVT) LTD", 1);
        }
        
        
        return ("Project"+Integer.toString(n1));
    }
    
    
    public String getItemId()
    {
        String gen = "select count(*) as 'field' from item";
   
        int n1=1;
      
        
        ResultSet count1 = db1.executeSQLQuery(gen);
        
        try
        {
            if(count1.next())
            {
                n1 += Integer.parseInt(count1.getString("field"));
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(),"METROPOLITAN ENGINEERING (PVT) LTD", 1);
        }
        
        
        return ("Item"+Integer.toString(n1));
    }
    
    public void loadEditProjectList()
    {
        
        this.cmbProName.removeAllItems();
        
        String proList = "select pName as 'field' from project where pAvailability = 'YES'";
   
        
      
        
        ResultSet countList = db1.executeSQLQuery(proList);
        
        try
        {
            while(countList.next())
            {
                //n1 += Integer.parseInt(count1.getString("field"));
                this.cmbProName.addItem(countList.getString("field"));
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.getMessage(),"METROPOLITAN ENGINEERING (PVT) LTD", 1);
        }
    }
    
    //my own methods ends here
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddEditRemoveProjects.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddEditRemoveProjects.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddEditRemoveProjects.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddEditRemoveProjects.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddEditRemoveProjects().setVisible(true);
            }
        });
        
        
        
        
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddProject;
    private javax.swing.JButton btnAddProject1;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbProName;
    private javax.swing.JComboBox cmbSupp1;
    private javax.swing.JComboBox cmbSupp10;
    private javax.swing.JComboBox cmbSupp11;
    private javax.swing.JComboBox cmbSupp12;
    private javax.swing.JComboBox cmbSupp13;
    private javax.swing.JComboBox cmbSupp14;
    private javax.swing.JComboBox cmbSupp15;
    private javax.swing.JComboBox cmbSupp16;
    private javax.swing.JComboBox cmbSupp17;
    private javax.swing.JComboBox cmbSupp18;
    private javax.swing.JComboBox cmbSupp19;
    private javax.swing.JComboBox cmbSupp2;
    private javax.swing.JComboBox cmbSupp20;
    private javax.swing.JComboBox cmbSupp3;
    private javax.swing.JComboBox cmbSupp4;
    private javax.swing.JComboBox cmbSupp5;
    private javax.swing.JComboBox cmbSupp6;
    private javax.swing.JComboBox cmbSupp7;
    private javax.swing.JComboBox cmbSupp8;
    private javax.swing.JComboBox cmbSupp9;
    private javax.swing.JComboBox cmbSuppGlobal;
    private javax.swing.JComboBox cmbSuppGlobal1;
    private com.toedter.calendar.JDateChooser date1;
    private com.toedter.calendar.JDateChooser date10;
    private com.toedter.calendar.JDateChooser date11;
    private com.toedter.calendar.JDateChooser date12;
    private com.toedter.calendar.JDateChooser date13;
    private com.toedter.calendar.JDateChooser date14;
    private com.toedter.calendar.JDateChooser date15;
    private com.toedter.calendar.JDateChooser date16;
    private com.toedter.calendar.JDateChooser date17;
    private com.toedter.calendar.JDateChooser date18;
    private com.toedter.calendar.JDateChooser date19;
    private com.toedter.calendar.JDateChooser date2;
    private com.toedter.calendar.JDateChooser date20;
    private com.toedter.calendar.JDateChooser date3;
    private com.toedter.calendar.JDateChooser date4;
    private com.toedter.calendar.JDateChooser date5;
    private com.toedter.calendar.JDateChooser date6;
    private com.toedter.calendar.JDateChooser date7;
    private com.toedter.calendar.JDateChooser date8;
    private com.toedter.calendar.JDateChooser date9;
    private com.toedter.calendar.JDateChooser dateGlobal;
    private com.toedter.calendar.JDateChooser dateGlobal1;
    private javax.swing.JButton jButton1;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tableSummaryProjects;
    private javax.swing.JTextField txtItem1;
    private javax.swing.JTextField txtItem10;
    private javax.swing.JTextField txtItem11;
    private javax.swing.JTextField txtItem12;
    private javax.swing.JTextField txtItem13;
    private javax.swing.JTextField txtItem14;
    private javax.swing.JTextField txtItem15;
    private javax.swing.JTextField txtItem16;
    private javax.swing.JTextField txtItem17;
    private javax.swing.JTextField txtItem18;
    private javax.swing.JTextField txtItem19;
    private javax.swing.JTextField txtItem2;
    private javax.swing.JTextField txtItem20;
    private javax.swing.JTextField txtItem3;
    private javax.swing.JTextField txtItem4;
    private javax.swing.JTextField txtItem5;
    private javax.swing.JTextField txtItem6;
    private javax.swing.JTextField txtItem7;
    private javax.swing.JTextField txtItem8;
    private javax.swing.JTextField txtItem9;
    private javax.swing.JTextField txtProID;
    private javax.swing.JTextField txtProID1;
    private javax.swing.JTextField txtProName;
    private javax.swing.JTextField txtQ1;
    private javax.swing.JTextField txtQ10;
    private javax.swing.JTextField txtQ11;
    private javax.swing.JTextField txtQ12;
    private javax.swing.JTextField txtQ13;
    private javax.swing.JTextField txtQ14;
    private javax.swing.JTextField txtQ15;
    private javax.swing.JTextField txtQ16;
    private javax.swing.JTextField txtQ17;
    private javax.swing.JTextField txtQ18;
    private javax.swing.JTextField txtQ19;
    private javax.swing.JTextField txtQ2;
    private javax.swing.JTextField txtQ20;
    private javax.swing.JTextField txtQ3;
    private javax.swing.JTextField txtQ4;
    private javax.swing.JTextField txtQ5;
    private javax.swing.JTextField txtQ6;
    private javax.swing.JTextField txtQ7;
    private javax.swing.JTextField txtQ8;
    private javax.swing.JTextField txtQ9;
    private javax.swing.JTextField txtToday;
    // End of variables declaration//GEN-END:variables
}
